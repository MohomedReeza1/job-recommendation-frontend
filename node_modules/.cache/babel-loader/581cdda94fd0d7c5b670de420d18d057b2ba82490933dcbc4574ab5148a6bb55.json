{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://127.0.0.1:8000/api\";\nexport const api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Add request interceptor to automatically include auth token\napi.interceptors.request.use(config => {\n  console.log(`Making request to: ${config.url}`);\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error(\"Request error:\", error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor for better error handling\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$config, _error$config2, _error$response, _error$response2, _error$response3, _error$response4;\n  // Log detailed error information\n  console.error(\"API Error:\", {\n    endpoint: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method,\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    statusText: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusText,\n    data: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data,\n    message: error.message\n  });\n\n  // You can handle specific error codes here\n  if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 401) {\n    // Token expired or invalid, clear localStorage and redirect to login\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"role\");\n    localStorage.removeItem(\"user_id\");\n    localStorage.removeItem(\"specific_id\");\n\n    // Redirect to login page if not already there\n    if (!window.location.pathname.includes(\"/login\")) {\n      window.location.href = \"/login\";\n    }\n  }\n  return Promise.reject(error);\n});\nexport const fetchJobs = async () => {\n  try {\n    const response = await api.get(\"/jobs/\");\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching jobs:\", error);\n    throw error;\n  }\n};\nexport const fetchRecommendations = async () => {\n  const specific_id = localStorage.getItem(\"specific_id\");\n  if (!specific_id) {\n    console.error(\"fetchRecommendations: No specific ID found\");\n    throw new Error(\"User profile information missing\");\n  }\n  try {\n    const response = await api.get(`/recommendations/${specific_id}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recommendations:\", error);\n    throw error;\n  }\n};\nexport const fetchRecommendationsWithForm = async formData => {\n  try {\n    const response = await api.post(\"/recommendations/\", formData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recommendations:\", error);\n    throw error;\n  }\n};\nexport const fetchAppliedJobs = async () => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  if (!token) {\n    console.error(\"fetchAppliedJobs: No auth token found\");\n    return [];\n  }\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\n    console.error(\"fetchAppliedJobs: No specific ID found\");\n    return [];\n  }\n  try {\n    const response = await api.get(`/applied-jobs/${specific_id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching applied jobs:\", error);\n    return [];\n  }\n};\nexport const loginJobSeeker = async (email, password) => {\n  try {\n    const response = await api.post(\"/auth/login\", new URLSearchParams({\n      username: email,\n      password,\n      scope: \"job_seeker\"\n    }), {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    });\n    console.log(\"Login response:\", response.data);\n\n    // Ensure specific_id is present\n    if (response.data.specific_id === undefined || response.data.specific_id === null) {\n      console.warn(\"No specific_id in login API response, setting a placeholder value\");\n      response.data.specific_id = \"pending\";\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    console.error(\"Login error:\", ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw error;\n  }\n};\nexport const loginEmployer = async (email, password) => {\n  try {\n    // First, make the login request\n    const response = await api.post(\"/auth/login\", new URLSearchParams({\n      username: email,\n      password,\n      scope: \"recruiter\"\n    }), {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    });\n\n    // Debug the raw response\n    console.log(\"Raw login response data:\", JSON.stringify(response.data));\n    if (!response.data || !response.data.access_token) {\n      throw new Error(\"Invalid response from server: Missing access token\");\n    }\n\n    // Extract the specific_id from the response and ensure it's properly typed\n    const specificId = response.data.specific_id !== undefined ? response.data.specific_id : null;\n\n    // Create a clean response object with properly typed values\n    const cleanResponse = {\n      access_token: response.data.access_token,\n      token: response.data.access_token,\n      // Add token property for compatibility\n      token_type: response.data.token_type,\n      role: response.data.role,\n      user_id: Number(response.data.user_id),\n      specific_id: specificId !== null ? Number(specificId) : null,\n      email: email // Add email for reference\n    };\n    console.log(\"Found existing agency profile with ID:\", cleanResponse.specific_id);\n    console.log(\"Cleaned login response data:\", cleanResponse);\n    return cleanResponse;\n  } catch (error) {\n    var _error$response6;\n    console.error(\"Login error:\", ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message);\n    throw error;\n  }\n};\n\n// âœ… Fetch Job Seeker Profile\nexport const fetchJobSeekerProfile = async () => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  const user_id = localStorage.getItem(\"user_id\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\n    console.error(\"Missing specific_id for job seeker profile fetch\");\n\n    // Attempt to get specific_id by requesting a new empty profile creation\n    try {\n      // Try to create a profile using the user_id\n      if (user_id) {\n        const response = await api.post(\"/seekers/\", {\n          user_id: parseInt(user_id)\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // Get the specific_id from the response and store it\n        if (response.data && response.data.seeker_id) {\n          localStorage.setItem(\"specific_id\", String(response.data.seeker_id));\n          console.log(\"Created new profile and got specific_id:\", response.data.seeker_id);\n\n          // Return the newly created profile\n          return response.data;\n        }\n      }\n    } catch (profileError) {\n      console.error(\"Failed to create profile:\", profileError);\n    }\n\n    // Return a default empty profile\n    return {\n      name: \"\",\n      age: null,\n      gender: \"\",\n      height: null,\n      weight: null,\n      marital_status: \"\",\n      num_of_children: null,\n      education: \"\",\n      skills: \"\",\n      interests: \"\",\n      previous_jobs: \"\",\n      looking_jobs: \"\",\n      description: \"\",\n      passport_status: \"\"\n    };\n  }\n  try {\n    const response = await api.get(`/seekers/${specific_id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching profile:\", error);\n    // Return empty profile on error\n    return {\n      name: \"\",\n      age: null,\n      gender: \"\",\n      height: null,\n      weight: null,\n      marital_status: \"\",\n      num_of_children: null,\n      education: \"\",\n      skills: \"\",\n      interests: \"\",\n      previous_jobs: \"\",\n      looking_jobs: \"\",\n      description: \"\",\n      passport_status: \"\"\n    };\n  }\n};\nexport const createJobSeekerProfile = async profileData => {\n  const token = localStorage.getItem(\"token\");\n  const user_id = localStorage.getItem(\"user_id\");\n  if (!token || !user_id) {\n    throw new Error(\"Authentication required\");\n  }\n\n  // Add user_id to the profile data\n  const completeProfileData = {\n    ...profileData,\n    user_id: parseInt(user_id)\n  };\n  try {\n    const response = await api.post(\"/seekers/\", completeProfileData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error creating profile:\", error);\n    throw error;\n  }\n};\nexport const updateJobSeekerProfile = async profileData => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  if (!token || !specific_id) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.put(`/seekers/${specific_id}`, profileData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updating profile:\", error);\n    throw error;\n  }\n};\n\n// Function to handle applying for a job\nexport const applyForJob = async (jobId, cvFile, coverLetterFile) => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n\n  // Create form data\n  const formData = new FormData();\n  formData.append(\"job_id\", jobId);\n  formData.append(\"cv\", cvFile);\n  if (coverLetterFile) {\n    formData.append(\"cover_letter\", coverLetterFile);\n  }\n  try {\n    const response = await axios.post(`${API_BASE_URL}/apply-job/`, formData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error applying for job:\", error);\n    throw error;\n  }\n};\n\n//////////////////////////////////////////////\n\n// âœ¨ NEW: Fetch recruiter (agency) profile\nexport const fetchRecruiterProfile = async () => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.get(\"/recruiters/profile/me\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recruiter profile:\", error);\n    throw error;\n  }\n};\n\n// âœ¨ NEW: Fetch agency ID for the current user\nexport const fetchAgencyIdForUser = async () => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.get(\"/recruiters/agency-id\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data.agency_id;\n  } catch (error) {\n    console.error(\"Error fetching agency ID:\", error);\n    return null;\n  }\n};\n\n// âœ¨ NEW: Fetch jobs posted by the current recruiter\nexport const fetchMyPostedJobs = async () => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.get(\"/recruiters/my-posted-jobs\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching posted jobs:\", error);\n    throw error;\n  }\n};\nexport const postJob = async jobData => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    // We don't need to set the recruiter_id/agency_id here\n    // The backend will handle setting the correct agency_id based on the authenticated user\n\n    const response = await api.post(\"/post-job/\", jobData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response7;\n    console.error(\"Error posting job:\", ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message);\n    throw error;\n  }\n};\nexport const deleteJob = async jobId => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.delete(`/jobs/${jobId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response8;\n    console.error(\"Error deleting job:\", ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error.message);\n    throw error;\n  }\n};\nexport const fetchJobDetails = async jobId => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await api.get(`/jobs/${jobId}`, {\n      headers: token ? {\n        Authorization: `Bearer ${token}`\n      } : {}\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response9;\n    console.error(\"Error fetching job details:\", ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || error.message);\n    throw error;\n  }\n};\nexport const fetchJobApplicants = async jobId => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.get(`/job-applicants/${jobId}/`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response10;\n    console.error(\"Error fetching job applicants:\", ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.data) || error.message);\n    throw error;\n  }\n};\nexport const updateJob = async (jobId, jobData) => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.put(`/jobs/${jobId}`, jobData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response11;\n    console.error(\"Error updating job:\", ((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.data) || error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","console","log","url","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$config","_error$config2","_error$response","_error$response2","_error$response3","_error$response4","endpoint","method","status","statusText","data","message","removeItem","window","location","pathname","includes","href","fetchJobs","get","fetchRecommendations","specific_id","Error","fetchRecommendationsWithForm","formData","post","fetchAppliedJobs","loginJobSeeker","email","password","URLSearchParams","username","scope","undefined","warn","_error$response5","loginEmployer","JSON","stringify","access_token","specificId","cleanResponse","token_type","role","user_id","Number","_error$response6","fetchJobSeekerProfile","parseInt","seeker_id","setItem","String","profileError","name","age","gender","height","weight","marital_status","num_of_children","education","skills","interests","previous_jobs","looking_jobs","description","passport_status","createJobSeekerProfile","profileData","completeProfileData","updateJobSeekerProfile","put","applyForJob","jobId","cvFile","coverLetterFile","FormData","append","fetchRecruiterProfile","fetchAgencyIdForUser","agency_id","fetchMyPostedJobs","postJob","jobData","_error$response7","deleteJob","delete","_error$response8","fetchJobDetails","_error$response9","fetchJobApplicants","_error$response10","updateJob","_error$response11"],"sources":["C:/final_year_project/app/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://127.0.0.1:8000/api\";\r\n\r\nexport const api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Add request interceptor to automatically include auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`Making request to: ${config.url}`);\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error(\"Request error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor for better error handling\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Log detailed error information\r\n    console.error(\"API Error:\", {\r\n      endpoint: error.config?.url,\r\n      method: error.config?.method,\r\n      status: error.response?.status,\r\n      statusText: error.response?.statusText,\r\n      data: error.response?.data,\r\n      message: error.message\r\n    });\r\n    \r\n    // You can handle specific error codes here\r\n    if (error.response?.status === 401) {\r\n      // Token expired or invalid, clear localStorage and redirect to login\r\n      localStorage.removeItem(\"token\");\r\n      localStorage.removeItem(\"role\");\r\n      localStorage.removeItem(\"user_id\");\r\n      localStorage.removeItem(\"specific_id\");\r\n      \r\n      // Redirect to login page if not already there\r\n      if (!window.location.pathname.includes(\"/login\")) {\r\n        window.location.href = \"/login\";\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const fetchJobs = async () => {\r\n  try {\r\n    const response = await api.get(\"/jobs/\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching jobs:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchRecommendations = async () => {\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n  if (!specific_id) {\r\n    console.error(\"fetchRecommendations: No specific ID found\");\r\n    throw new Error(\"User profile information missing\");\r\n  }\r\n  \r\n  try {\r\n    const response = await api.get(`/recommendations/${specific_id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching recommendations:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchRecommendationsWithForm = async (formData) => {\r\n  try {\r\n    const response = await api.post(\"/recommendations/\", formData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching recommendations:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchAppliedJobs = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n  if (!token) {\r\n      console.error(\"fetchAppliedJobs: No auth token found\");\r\n      return [];\r\n  }\r\n  \r\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\r\n      console.error(\"fetchAppliedJobs: No specific ID found\");\r\n      return [];\r\n  }\r\n  \r\n  try {\r\n      const response = await api.get(`/applied-jobs/${specific_id}`, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      \r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error fetching applied jobs:\", error);\r\n      return [];\r\n  }\r\n};\r\n\r\nexport const loginJobSeeker = async (email, password) => {\r\n  try {\r\n    const response = await api.post(\"/auth/login\", new URLSearchParams({ \r\n      username: email, \r\n      password, \r\n      scope: \"job_seeker\" \r\n    }),\r\n    { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n    );\r\n    \r\n    console.log(\"Login response:\", response.data);\r\n    \r\n    // Ensure specific_id is present\r\n    if (response.data.specific_id === undefined || response.data.specific_id === null) {\r\n      console.warn(\"No specific_id in login API response, setting a placeholder value\");\r\n      response.data.specific_id = \"pending\";\r\n    }\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const loginEmployer = async (email, password) => {\r\n  try {\r\n    // First, make the login request\r\n    const response = await api.post(\"/auth/login\", new URLSearchParams({\r\n      username: email, \r\n      password, \r\n      scope: \"recruiter\" \r\n    }),\r\n    { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n    );\r\n    \r\n    // Debug the raw response\r\n    console.log(\"Raw login response data:\", JSON.stringify(response.data));\r\n    \r\n    if (!response.data || !response.data.access_token) {\r\n      throw new Error(\"Invalid response from server: Missing access token\");\r\n    }\r\n    \r\n    // Extract the specific_id from the response and ensure it's properly typed\r\n    const specificId = response.data.specific_id !== undefined ? response.data.specific_id : null;\r\n    \r\n    // Create a clean response object with properly typed values\r\n    const cleanResponse = {\r\n      access_token: response.data.access_token,\r\n      token: response.data.access_token, // Add token property for compatibility\r\n      token_type: response.data.token_type,\r\n      role: response.data.role,\r\n      user_id: Number(response.data.user_id),\r\n      specific_id: specificId !== null ? Number(specificId) : null,\r\n      email: email // Add email for reference\r\n    };\r\n    \r\n    console.log(\"Found existing agency profile with ID:\", cleanResponse.specific_id);\r\n    console.log(\"Cleaned login response data:\", cleanResponse);\r\n    \r\n    return cleanResponse;\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n// âœ… Fetch Job Seeker Profile\r\nexport const fetchJobSeekerProfile = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  const user_id = localStorage.getItem(\"user_id\");\r\n  \r\n  if (!token) {\r\n      throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\r\n      console.error(\"Missing specific_id for job seeker profile fetch\");\r\n      \r\n      // Attempt to get specific_id by requesting a new empty profile creation\r\n      try {\r\n          // Try to create a profile using the user_id\r\n          if (user_id) {\r\n              const response = await api.post(\"/seekers/\", \r\n                  { user_id: parseInt(user_id) },\r\n                  { headers: { Authorization: `Bearer ${token}` }}\r\n              );\r\n              \r\n              // Get the specific_id from the response and store it\r\n              if (response.data && response.data.seeker_id) {\r\n                  localStorage.setItem(\"specific_id\", String(response.data.seeker_id));\r\n                  console.log(\"Created new profile and got specific_id:\", response.data.seeker_id);\r\n                  \r\n                  // Return the newly created profile\r\n                  return response.data;\r\n              }\r\n          }\r\n      } catch (profileError) {\r\n          console.error(\"Failed to create profile:\", profileError);\r\n      }\r\n      \r\n      // Return a default empty profile\r\n      return {\r\n          name: \"\",\r\n          age: null,\r\n          gender: \"\",\r\n          height: null,\r\n          weight: null,\r\n          marital_status: \"\",\r\n          num_of_children: null,\r\n          education: \"\",\r\n          skills: \"\",\r\n          interests: \"\",\r\n          previous_jobs: \"\",\r\n          looking_jobs: \"\",\r\n          description: \"\",\r\n          passport_status: \"\"\r\n      };\r\n  }\r\n  \r\n  try {\r\n      const response = await api.get(`/seekers/${specific_id}`, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error fetching profile:\", error);\r\n      // Return empty profile on error\r\n      return {\r\n          name: \"\",\r\n          age: null,\r\n          gender: \"\",\r\n          height: null,\r\n          weight: null,\r\n          marital_status: \"\",\r\n          num_of_children: null,\r\n          education: \"\",\r\n          skills: \"\",\r\n          interests: \"\",\r\n          previous_jobs: \"\",\r\n          looking_jobs: \"\",\r\n          description: \"\",\r\n          passport_status: \"\"\r\n      };\r\n  }\r\n};\r\n\r\nexport const createJobSeekerProfile = async (profileData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const user_id = localStorage.getItem(\"user_id\");\r\n  \r\n  if (!token || !user_id) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  // Add user_id to the profile data\r\n  const completeProfileData = {\r\n    ...profileData,\r\n    user_id: parseInt(user_id)\r\n  };\r\n  \r\n  try {\r\n    const response = await api.post(\"/seekers/\", completeProfileData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error creating profile:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateJobSeekerProfile = async (profileData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n  if (!token || !specific_id) {\r\n      throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n      const response = await api.put(`/seekers/${specific_id}`, profileData, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error updating profile:\", error);\r\n      throw error;\r\n  }\r\n};\r\n\r\n// Function to handle applying for a job\r\nexport const applyForJob = async (jobId, cvFile, coverLetterFile) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  \r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  // Create form data\r\n  const formData = new FormData();\r\n  formData.append(\"job_id\", jobId);\r\n  formData.append(\"cv\", cvFile);\r\n  \r\n  if (coverLetterFile) {\r\n    formData.append(\"cover_letter\", coverLetterFile);\r\n  }\r\n  \r\n  try {\r\n    const response = await axios.post(\r\n      `${API_BASE_URL}/apply-job/`,\r\n      formData,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error applying for job:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//////////////////////////////////////////////\r\n\r\n// âœ¨ NEW: Fetch recruiter (agency) profile\r\nexport const fetchRecruiterProfile = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n    const response = await api.get(\"/recruiters/profile/me\", {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching recruiter profile:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// âœ¨ NEW: Fetch agency ID for the current user\r\nexport const fetchAgencyIdForUser = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n    const response = await api.get(\"/recruiters/agency-id\", {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data.agency_id;\r\n  } catch (error) {\r\n    console.error(\"Error fetching agency ID:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// âœ¨ NEW: Fetch jobs posted by the current recruiter\r\nexport const fetchMyPostedJobs = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n    const response = await api.get(\"/recruiters/my-posted-jobs\", {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching posted jobs:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const postJob = async (jobData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  \r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n    // We don't need to set the recruiter_id/agency_id here\r\n    // The backend will handle setting the correct agency_id based on the authenticated user\r\n    \r\n    const response = await api.post(\"/post-job/\", jobData, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error posting job:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteJob = async (jobId) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  try {\r\n    const response = await api.delete(`/jobs/${jobId}`, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error deleting job:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchJobDetails = async (jobId) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  try {\r\n    const response = await api.get(`/jobs/${jobId}`, {\r\n      headers: token ? { Authorization: `Bearer ${token}` } : {}\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching job details:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchJobApplicants = async (jobId) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  try {\r\n    const response = await api.get(`/job-applicants/${jobId}/`, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching job applicants:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateJob = async (jobId, jobData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  \r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n    const response = await api.put(`/jobs/${jobId}`, jobData, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error updating job:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}