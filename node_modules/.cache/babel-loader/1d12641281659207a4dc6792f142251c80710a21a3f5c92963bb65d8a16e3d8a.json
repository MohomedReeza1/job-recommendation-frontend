{"ast":null,"code":"var _jsxFileName = \"C:\\\\final_year_project\\\\app\\\\frontend\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport AppRoutes from \"./config/AppRoutes\";\nimport Footer from \"./components/Footer\";\nimport LocalStorageDebugger from \"./components/LocalStorageDebugger\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppRoutes, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), process.env.NODE_ENV !== 'production' && /*#__PURE__*/_jsxDEV(LocalStorageDebugger, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 49\n    }, this)]\n  }, void 0, true);\n};\n\n// Add this to a component that loads early (like App.js)\n// to verify your environment configuration\n_c = App;\nuseEffect(() => {\n  // Print environment variables (only in development)\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Environment Configuration:');\n    console.log('API Base URL:', process.env.REACT_APP_API_BASE_URL);\n    console.log('Environment:', process.env.NODE_ENV);\n  }\n\n  // Test API connectivity\n  const testAPIConnection = async () => {\n    try {\n      // Make a simple request to verify CORS is working\n      const response = await fetch(`${process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000/api'}/jobs/?limit=1`);\n      console.log('API Connection Test:', response.status, response.statusText);\n      if (response.ok) {\n        console.log('API connection successful!');\n      } else {\n        console.warn('API returned error status:', response.status);\n      }\n    } catch (error) {\n      console.error('API Connection Test Failed:', error.message);\n    }\n  };\n  testAPIConnection();\n}, []);\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Navbar","AppRoutes","Footer","LocalStorageDebugger","jsxDEV","_jsxDEV","Fragment","_Fragment","App","children","fileName","_jsxFileName","lineNumber","columnNumber","process","env","NODE_ENV","_c","useEffect","console","log","REACT_APP_API_BASE_URL","testAPIConnection","response","fetch","status","statusText","ok","warn","error","message","$RefreshReg$"],"sources":["C:/final_year_project/app/frontend/src/App.js"],"sourcesContent":["import React from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport AppRoutes from \"./config/AppRoutes\";\nimport Footer from \"./components/Footer\";\nimport LocalStorageDebugger from \"./components/LocalStorageDebugger\";\n\nconst App = () => {\n  return (\n    <>\n      <Navbar />\n      <AppRoutes />\n      <Footer />\n      {process.env.NODE_ENV !== 'production' && <LocalStorageDebugger />}\n    </>\n  );\n};\n\n\n// Add this to a component that loads early (like App.js)\n// to verify your environment configuration\n\nuseEffect(() => {\n  // Print environment variables (only in development)\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Environment Configuration:');\n    console.log('API Base URL:', process.env.REACT_APP_API_BASE_URL);\n    console.log('Environment:', process.env.NODE_ENV);\n  }\n  \n  // Test API connectivity\n  const testAPIConnection = async () => {\n    try {\n      // Make a simple request to verify CORS is working\n      const response = await fetch(`${process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000/api'}/jobs/?limit=1`);\n      console.log('API Connection Test:', response.status, response.statusText);\n      \n      if (response.ok) {\n        console.log('API connection successful!');\n      } else {\n        console.warn('API returned error status:', response.status);\n      }\n    } catch (error) {\n      console.error('API Connection Test Failed:', error.message);\n    }\n  };\n  \n  testAPIConnection();\n}, []);\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,oBAAoB,MAAM,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAErE,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,gBACEJ,OAAA,CAACL,MAAM;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVR,OAAA,CAACJ,SAAS;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACbR,OAAA,CAACH,MAAM;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACTC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,iBAAIX,OAAA,CAACF,oBAAoB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAClE,CAAC;AAEP,CAAC;;AAGD;AACA;AAAAI,EAAA,GAbMT,GAAG;AAeTU,SAAS,CAAC,MAAM;EACd;EACA,IAAIJ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAC1CG,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzCD,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEN,OAAO,CAACC,GAAG,CAACM,sBAAsB,CAAC;IAChEF,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEN,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EACnD;;EAEA;EACA,MAAMM,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,OAAO,CAACC,GAAG,CAACM,sBAAsB,IAAI,2BAA2B,gBAAgB,CAAC;MAClHF,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEG,QAAQ,CAACE,MAAM,EAAEF,QAAQ,CAACG,UAAU,CAAC;MAEzE,IAAIH,QAAQ,CAACI,EAAE,EAAE;QACfR,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MAC3C,CAAC,MAAM;QACLD,OAAO,CAACS,IAAI,CAAC,4BAA4B,EAAEL,QAAQ,CAACE,MAAM,CAAC;MAC7D;IACF,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACC,OAAO,CAAC;IAC7D;EACF,CAAC;EAEDR,iBAAiB,CAAC,CAAC;AACrB,CAAC,EAAE,EAAE,CAAC;AAEN,eAAed,GAAG;AAAC,IAAAS,EAAA;AAAAc,YAAA,CAAAd,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}