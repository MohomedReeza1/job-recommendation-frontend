{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://127.0.0.1:8000/api\";\nexport const api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport const fetchJobs = async () => {\n  try {\n    const response = await api.get(\"/jobs/\");\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching jobs:\", error);\n    throw error;\n  }\n};\nexport const fetchRecommendations = async () => {\n  const specific_id = localStorage.getItem(\"specific_id\");\n  if (!specific_id) {\n    console.error(\"fetchRecommendations: No specific ID found\");\n    throw new Error(\"User profile information missing\");\n  }\n  try {\n    const response = await api.get(`/recommendations/${specific_id}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recommendations:\", error);\n    throw error;\n  }\n};\nexport const fetchRecommendationsWithForm = async formData => {\n  try {\n    const response = await api.post(\"/recommendations/\", formData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recommendations:\", error);\n    throw error;\n  }\n};\nexport const fetchAppliedJobs = async () => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  if (!token) {\n    console.error(\"fetchAppliedJobs: No auth token found\");\n    return [];\n  }\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\n    console.error(\"fetchAppliedJobs: No specific ID found\");\n    return [];\n  }\n  try {\n    const response = await api.get(`/applied-jobs/${specific_id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching applied jobs:\", error);\n    return [];\n  }\n};\nexport const loginJobSeeker = async (email, password) => {\n  try {\n    const response = await api.post(\"/auth/login\", new URLSearchParams({\n      username: email,\n      password,\n      scope: \"job_seeker\"\n    }), {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    });\n    console.log(\"Login response:\", response.data);\n\n    // Ensure specific_id is present\n    if (response.data.specific_id === undefined || response.data.specific_id === null) {\n      console.warn(\"No specific_id in login API response, setting a placeholder value\");\n      response.data.specific_id = \"pending\";\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"Login error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\nexport const loginEmployer = async (email, password) => {\n  try {\n    const response = await api.post(\"/auth/login\", new URLSearchParams({\n      username: email,\n      password,\n      scope: \"recruiter\"\n    }), {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error(\"Login error:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw error;\n  }\n};\n\n// âœ… Fetch Job Seeker Profile\nexport const fetchJobSeekerProfile = async () => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  const user_id = localStorage.getItem(\"user_id\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\n    console.error(\"Missing specific_id for job seeker profile fetch\");\n\n    // Attempt to get specific_id by requesting a new empty profile creation\n    try {\n      // Try to create a profile using the user_id\n      if (user_id) {\n        const response = await api.post(\"/seekers/\", {\n          user_id: parseInt(user_id)\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // Get the specific_id from the response and store it\n        if (response.data && response.data.seeker_id) {\n          localStorage.setItem(\"specific_id\", String(response.data.seeker_id));\n          console.log(\"Created new profile and got specific_id:\", response.data.seeker_id);\n\n          // Return the newly created profile\n          return response.data;\n        }\n      }\n    } catch (profileError) {\n      console.error(\"Failed to create profile:\", profileError);\n    }\n\n    // Return a default empty profile\n    return {\n      name: \"\",\n      age: null,\n      gender: \"\",\n      height: null,\n      weight: null,\n      marital_status: \"\",\n      num_of_children: null,\n      education: \"\",\n      skills: \"\",\n      interests: \"\",\n      previous_jobs: \"\",\n      looking_jobs: \"\",\n      description: \"\",\n      passport_status: \"\"\n    };\n  }\n  try {\n    const response = await api.get(`/seekers/${specific_id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching profile:\", error);\n    // Return empty profile on error\n    return {\n      name: \"\",\n      age: null,\n      gender: \"\",\n      height: null,\n      weight: null,\n      marital_status: \"\",\n      num_of_children: null,\n      education: \"\",\n      skills: \"\",\n      interests: \"\",\n      previous_jobs: \"\",\n      looking_jobs: \"\",\n      description: \"\",\n      passport_status: \"\"\n    };\n  }\n};\nexport const createJobSeekerProfile = async profileData => {\n  const token = localStorage.getItem(\"token\");\n  const user_id = localStorage.getItem(\"user_id\");\n  if (!token || !user_id) {\n    throw new Error(\"Authentication required\");\n  }\n\n  // Add user_id to the profile data\n  const completeProfileData = {\n    ...profileData,\n    user_id: parseInt(user_id)\n  };\n  try {\n    const response = await api.post(\"/seekers/\", completeProfileData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error creating profile:\", error);\n    throw error;\n  }\n};\nexport const updateJobSeekerProfile = async profileData => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  if (!token || !specific_id) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.put(`/seekers/${specific_id}`, profileData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updating profile:\", error);\n    throw error;\n  }\n};\n\n// Function to handle applying for a job\nexport const applyForJob = async (jobId, cvFile, coverLetterFile) => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n\n  // Create form data\n  const formData = new FormData();\n  formData.append(\"job_id\", jobId);\n  formData.append(\"cv\", cvFile);\n  if (coverLetterFile) {\n    formData.append(\"cover_letter\", coverLetterFile);\n  }\n  try {\n    const response = await axios.post(`${API_BASE_URL}/apply-job/`, formData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error applying for job:\", error);\n    throw error;\n  }\n};\n\n// Fetch Recruiter Profile\nexport const fetchRecruiterProfile = async () => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  const user_id = localStorage.getItem(\"user_id\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n\n  // Handle pending or invalid specific_id\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\n    console.log(\"Missing specific_id for recruiter profile fetch\");\n\n    // Attempt to create a profile using the user_id\n    try {\n      if (user_id) {\n        const response = await api.post(\"/recruiters/\", {\n          user_id: parseInt(user_id),\n          agency_name: \"Your Agency\",\n          // Default values\n          agency_location: \"Not Specified\",\n          license_number: `TMP-${user_id}`\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // Get the specific_id from the response and store it\n        if (response.data && response.data.agency_id) {\n          localStorage.setItem(\"specific_id\", String(response.data.agency_id));\n          console.log(\"Created new recruiter profile and got specific_id:\", response.data.agency_id);\n\n          // Return the newly created profile\n          return response.data;\n        }\n      }\n    } catch (profileError) {\n      console.error(\"Failed to create profile:\", profileError);\n    }\n\n    // Return a default empty profile\n    return {\n      agency_name: \"\",\n      agency_location: \"\",\n      license_number: \"\",\n      contact_email: \"\"\n    };\n  }\n  try {\n    const response = await api.get(`/recruiters/${specific_id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching profile:\", error);\n    // Return empty profile on error\n    return {\n      agency_name: \"\",\n      agency_location: \"\",\n      license_number: \"\",\n      contact_email: \"\"\n    };\n  }\n};\nexport const createRecruiterProfile = async profileData => {\n  const token = localStorage.getItem(\"token\");\n  const user_id = localStorage.getItem(\"user_id\");\n  if (!token || !user_id) {\n    throw new Error(\"Authentication required\");\n  }\n\n  // Add user_id to the profile data\n  const completeProfileData = {\n    ...profileData,\n    user_id: parseInt(user_id)\n  };\n  try {\n    const response = await api.post(\"/recruiters/\", completeProfileData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error creating profile:\", error);\n    throw error;\n  }\n};\nexport const updateRecruiterProfile = async profileData => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  if (!token || !specific_id) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.put(`/recruiters/${specific_id}`, profileData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updating profile:\", error);\n    throw error;\n  }\n};\n\n// Fetch Job details to Recruiter Profile\nexport const fetchMyPostedJobs = async () => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  const user_id = localStorage.getItem(\"user_id\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n\n  // Handle pending or invalid specific_id\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\n    console.log(\"Missing specific_id for fetching posted jobs\");\n\n    // Try to get or create a profile first\n    try {\n      const profile = await fetchRecruiterProfile(); // This will create a profile if needed\n      const newSpecificId = localStorage.getItem(\"specific_id\");\n      if (newSpecificId && newSpecificId !== \"pending\") {\n        // Retry with the new ID\n        const response = await api.get(`/recruiters/${newSpecificId}/my-posted-jobs`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        return response.data;\n      }\n    } catch (profileError) {\n      console.error(\"Failed to create/fetch profile:\", profileError);\n    }\n\n    // Return empty array if we couldn't get a valid ID\n    return [];\n  }\n  try {\n    const response = await api.get(`/recruiters/${specific_id}/my-posted-jobs`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching posted jobs:\", error);\n    return []; // Return empty array instead of throwing\n  }\n};\nexport const postJob = async jobData => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  const user_id = localStorage.getItem(\"user_id\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n\n  // Handle pending or invalid specific_id\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\n    console.log(\"Missing specific_id for posting job\");\n\n    // Try to get or create a profile first\n    try {\n      const profile = await fetchRecruiterProfile(); // This will create a profile if needed\n      const newSpecificId = localStorage.getItem(\"specific_id\");\n      if (newSpecificId && newSpecificId !== \"pending\") {\n        // Use the new ID\n        const completeJobData = {\n          ...jobData,\n          recruiter_id: parseInt(newSpecificId)\n        };\n        const response = await api.post(\"/post-job/\", completeJobData, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        return response.data;\n      }\n    } catch (profileError) {\n      console.error(\"Failed to create/fetch profile:\", profileError);\n      throw new Error(\"Could not create recruiter profile. Please try again.\");\n    }\n  }\n  try {\n    // Set the recruiter_id from specific_id (agency_id) for recruiters\n    const completeJobData = {\n      ...jobData,\n      recruiter_id: parseInt(specific_id)\n    };\n    const response = await api.post(\"/post-job/\", completeJobData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    console.error(\"Error posting job:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw error;\n  }\n};\nexport const deleteJob = async jobId => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.delete(`/jobs/${jobId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    console.error(\"Error deleting job:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    throw error;\n  }\n};\nexport const fetchJobDetails = async jobId => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await api.get(`/jobs/${jobId}`, {\n      headers: token ? {\n        Authorization: `Bearer ${token}`\n      } : {}\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    console.error(\"Error fetching job details:\", ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw error;\n  }\n};\nexport const fetchJobApplicants = async jobId => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.get(`/job-applicants/${jobId}/`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response6;\n    console.error(\"Error fetching job applicants:\", ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","headers","fetchJobs","response","get","data","error","console","fetchRecommendations","specific_id","localStorage","getItem","Error","fetchRecommendationsWithForm","formData","post","fetchAppliedJobs","token","Authorization","loginJobSeeker","email","password","URLSearchParams","username","scope","log","undefined","warn","_error$response","message","loginEmployer","_error$response2","fetchJobSeekerProfile","user_id","parseInt","seeker_id","setItem","String","profileError","name","age","gender","height","weight","marital_status","num_of_children","education","skills","interests","previous_jobs","looking_jobs","description","passport_status","createJobSeekerProfile","profileData","completeProfileData","updateJobSeekerProfile","put","applyForJob","jobId","cvFile","coverLetterFile","FormData","append","fetchRecruiterProfile","agency_name","agency_location","license_number","agency_id","contact_email","createRecruiterProfile","updateRecruiterProfile","fetchMyPostedJobs","profile","newSpecificId","postJob","jobData","completeJobData","recruiter_id","_error$response3","deleteJob","delete","_error$response4","fetchJobDetails","_error$response5","fetchJobApplicants","_error$response6"],"sources":["C:/final_year_project/app/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://127.0.0.1:8000/api\";\r\n\r\nexport const api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\nexport const fetchJobs = async () => {\r\n  try {\r\n    const response = await api.get(\"/jobs/\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching jobs:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchRecommendations = async () => {\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n  if (!specific_id) {\r\n    console.error(\"fetchRecommendations: No specific ID found\");\r\n    throw new Error(\"User profile information missing\");\r\n  }\r\n  \r\n  try {\r\n    const response = await api.get(`/recommendations/${specific_id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching recommendations:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchRecommendationsWithForm = async (formData) => {\r\n  try {\r\n    const response = await api.post(\"/recommendations/\", formData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching recommendations:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchAppliedJobs = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n  if (!token) {\r\n      console.error(\"fetchAppliedJobs: No auth token found\");\r\n      return [];\r\n  }\r\n  \r\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\r\n      console.error(\"fetchAppliedJobs: No specific ID found\");\r\n      return [];\r\n  }\r\n  \r\n  try {\r\n      const response = await api.get(`/applied-jobs/${specific_id}`, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      \r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error fetching applied jobs:\", error);\r\n      return [];\r\n  }\r\n};\r\n\r\nexport const loginJobSeeker = async (email, password) => {\r\n  try {\r\n    const response = await api.post(\"/auth/login\", new URLSearchParams({ \r\n      username: email, \r\n      password, \r\n      scope: \"job_seeker\" \r\n    }),\r\n    { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n    );\r\n    \r\n    console.log(\"Login response:\", response.data);\r\n    \r\n    // Ensure specific_id is present\r\n    if (response.data.specific_id === undefined || response.data.specific_id === null) {\r\n      console.warn(\"No specific_id in login API response, setting a placeholder value\");\r\n      response.data.specific_id = \"pending\";\r\n    }\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\nexport const loginEmployer = async (email, password) => {\r\n  try {\r\n    const response = await api.post(\"/auth/login\", new URLSearchParams({\r\n      username: email, password, scope: \"recruiter\" }),\r\n      { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// âœ… Fetch Job Seeker Profile\r\nexport const fetchJobSeekerProfile = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  const user_id = localStorage.getItem(\"user_id\");\r\n  \r\n  if (!token) {\r\n      throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\r\n      console.error(\"Missing specific_id for job seeker profile fetch\");\r\n      \r\n      // Attempt to get specific_id by requesting a new empty profile creation\r\n      try {\r\n          // Try to create a profile using the user_id\r\n          if (user_id) {\r\n              const response = await api.post(\"/seekers/\", \r\n                  { user_id: parseInt(user_id) },\r\n                  { headers: { Authorization: `Bearer ${token}` }}\r\n              );\r\n              \r\n              // Get the specific_id from the response and store it\r\n              if (response.data && response.data.seeker_id) {\r\n                  localStorage.setItem(\"specific_id\", String(response.data.seeker_id));\r\n                  console.log(\"Created new profile and got specific_id:\", response.data.seeker_id);\r\n                  \r\n                  // Return the newly created profile\r\n                  return response.data;\r\n              }\r\n          }\r\n      } catch (profileError) {\r\n          console.error(\"Failed to create profile:\", profileError);\r\n      }\r\n      \r\n      // Return a default empty profile\r\n      return {\r\n          name: \"\",\r\n          age: null,\r\n          gender: \"\",\r\n          height: null,\r\n          weight: null,\r\n          marital_status: \"\",\r\n          num_of_children: null,\r\n          education: \"\",\r\n          skills: \"\",\r\n          interests: \"\",\r\n          previous_jobs: \"\",\r\n          looking_jobs: \"\",\r\n          description: \"\",\r\n          passport_status: \"\"\r\n      };\r\n  }\r\n  \r\n  try {\r\n      const response = await api.get(`/seekers/${specific_id}`, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error fetching profile:\", error);\r\n      // Return empty profile on error\r\n      return {\r\n          name: \"\",\r\n          age: null,\r\n          gender: \"\",\r\n          height: null,\r\n          weight: null,\r\n          marital_status: \"\",\r\n          num_of_children: null,\r\n          education: \"\",\r\n          skills: \"\",\r\n          interests: \"\",\r\n          previous_jobs: \"\",\r\n          looking_jobs: \"\",\r\n          description: \"\",\r\n          passport_status: \"\"\r\n      };\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const createJobSeekerProfile = async (profileData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const user_id = localStorage.getItem(\"user_id\");\r\n  \r\n  if (!token || !user_id) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  // Add user_id to the profile data\r\n  const completeProfileData = {\r\n    ...profileData,\r\n    user_id: parseInt(user_id)\r\n  };\r\n  \r\n  try {\r\n    const response = await api.post(\"/seekers/\", completeProfileData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error creating profile:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateJobSeekerProfile = async (profileData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n  if (!token || !specific_id) {\r\n      throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n      const response = await api.put(`/seekers/${specific_id}`, profileData, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error updating profile:\", error);\r\n      throw error;\r\n  }\r\n};\r\n\r\n// Function to handle applying for a job\r\nexport const applyForJob = async (jobId, cvFile, coverLetterFile) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  \r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  // Create form data\r\n  const formData = new FormData();\r\n  formData.append(\"job_id\", jobId);\r\n  formData.append(\"cv\", cvFile);\r\n  \r\n  if (coverLetterFile) {\r\n    formData.append(\"cover_letter\", coverLetterFile);\r\n  }\r\n  \r\n  try {\r\n    const response = await axios.post(\r\n      `${API_BASE_URL}/apply-job/`,\r\n      formData,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error applying for job:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Fetch Recruiter Profile\r\nexport const fetchRecruiterProfile = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  const user_id = localStorage.getItem(\"user_id\");\r\n  \r\n  if (!token) {\r\n      throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  // Handle pending or invalid specific_id\r\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\r\n      console.log(\"Missing specific_id for recruiter profile fetch\");\r\n      \r\n      // Attempt to create a profile using the user_id\r\n      try {\r\n          if (user_id) {\r\n              const response = await api.post(\"/recruiters/\", \r\n                  { \r\n                      user_id: parseInt(user_id),\r\n                      agency_name: \"Your Agency\", // Default values\r\n                      agency_location: \"Not Specified\",\r\n                      license_number: `TMP-${user_id}`\r\n                  },\r\n                  { headers: { Authorization: `Bearer ${token}` }}\r\n              );\r\n              \r\n              // Get the specific_id from the response and store it\r\n              if (response.data && response.data.agency_id) {\r\n                  localStorage.setItem(\"specific_id\", String(response.data.agency_id));\r\n                  console.log(\"Created new recruiter profile and got specific_id:\", response.data.agency_id);\r\n                  \r\n                  // Return the newly created profile\r\n                  return response.data;\r\n              }\r\n          }\r\n      } catch (profileError) {\r\n          console.error(\"Failed to create profile:\", profileError);\r\n      }\r\n      \r\n      // Return a default empty profile\r\n      return {\r\n          agency_name: \"\",\r\n          agency_location: \"\",\r\n          license_number: \"\",\r\n          contact_email: \"\"\r\n      };\r\n  }\r\n  \r\n  try {\r\n      const response = await api.get(`/recruiters/${specific_id}`, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error fetching profile:\", error);\r\n      // Return empty profile on error\r\n      return {\r\n          agency_name: \"\",\r\n          agency_location: \"\",\r\n          license_number: \"\",\r\n          contact_email: \"\"\r\n      };\r\n  }\r\n};\r\n\r\nexport const createRecruiterProfile = async (profileData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const user_id = localStorage.getItem(\"user_id\");\r\n  \r\n  if (!token || !user_id) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  // Add user_id to the profile data\r\n  const completeProfileData = {\r\n    ...profileData,\r\n    user_id: parseInt(user_id)\r\n  };\r\n  \r\n  try {\r\n    const response = await api.post(\"/recruiters/\", completeProfileData, {\r\n      headers: { \r\n        Authorization: `Bearer ${token}`, \r\n        \"Content-Type\": \"application/json\" \r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error creating profile:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateRecruiterProfile = async (profileData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n  if (!token || !specific_id) {\r\n      throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n      const response = await api.put(`/recruiters/${specific_id}`, profileData, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error updating profile:\", error);\r\n      throw error;\r\n  }\r\n};\r\n\r\n// Fetch Job details to Recruiter Profile\r\nexport const fetchMyPostedJobs = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  const user_id = localStorage.getItem(\"user_id\");\r\n  \r\n  if (!token) {\r\n      throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  // Handle pending or invalid specific_id\r\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\r\n      console.log(\"Missing specific_id for fetching posted jobs\");\r\n      \r\n      // Try to get or create a profile first\r\n      try {\r\n          const profile = await fetchRecruiterProfile(); // This will create a profile if needed\r\n          const newSpecificId = localStorage.getItem(\"specific_id\");\r\n          \r\n          if (newSpecificId && newSpecificId !== \"pending\") {\r\n              // Retry with the new ID\r\n              const response = await api.get(`/recruiters/${newSpecificId}/my-posted-jobs`, {\r\n                  headers: { Authorization: `Bearer ${token}` }\r\n              });\r\n              return response.data;\r\n          }\r\n      } catch (profileError) {\r\n          console.error(\"Failed to create/fetch profile:\", profileError);\r\n      }\r\n      \r\n      // Return empty array if we couldn't get a valid ID\r\n      return [];\r\n  }\r\n  \r\n  try {\r\n      const response = await api.get(`/recruiters/${specific_id}/my-posted-jobs`, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error fetching posted jobs:\", error);\r\n      return [];  // Return empty array instead of throwing\r\n  }\r\n};\r\n\r\nexport const postJob = async (jobData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  const user_id = localStorage.getItem(\"user_id\");\r\n  \r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  // Handle pending or invalid specific_id\r\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\r\n    console.log(\"Missing specific_id for posting job\");\r\n    \r\n    // Try to get or create a profile first\r\n    try {\r\n        const profile = await fetchRecruiterProfile(); // This will create a profile if needed\r\n        const newSpecificId = localStorage.getItem(\"specific_id\");\r\n        \r\n        if (newSpecificId && newSpecificId !== \"pending\") {\r\n            // Use the new ID\r\n            const completeJobData = {\r\n              ...jobData,\r\n              recruiter_id: parseInt(newSpecificId)\r\n            };\r\n            \r\n            const response = await api.post(\"/post-job/\", completeJobData, {\r\n              headers: { Authorization: `Bearer ${token}` }\r\n            });\r\n            return response.data;\r\n        }\r\n    } catch (profileError) {\r\n        console.error(\"Failed to create/fetch profile:\", profileError);\r\n        throw new Error(\"Could not create recruiter profile. Please try again.\");\r\n    }\r\n  }\r\n  \r\n  try {\r\n    // Set the recruiter_id from specific_id (agency_id) for recruiters\r\n    const completeJobData = {\r\n      ...jobData,\r\n      recruiter_id: parseInt(specific_id)\r\n    };\r\n    \r\n    const response = await api.post(\"/post-job/\", completeJobData, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error posting job:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteJob = async (jobId) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  try {\r\n    const response = await api.delete(`/jobs/${jobId}`, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error deleting job:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchJobDetails = async (jobId) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  try {\r\n    const response = await api.get(`/jobs/${jobId}`, {\r\n      headers: token ? { Authorization: `Bearer ${token}` } : {}\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching job details:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchJobApplicants = async (jobId) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  try {\r\n    const response = await api.get(`/job-applicants/${jobId}/`, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching job applicants:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}