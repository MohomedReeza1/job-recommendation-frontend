{"ast":null,"code":"import _objectSpread from\"C:/final_year_project/app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { useAuth } from \"../context/AuthContext\";\n// import { loginEmployer } from \"../services/api\";\n// import \"../styles/EmployerLogin.css\";\n// const EmployerLogin = () => {\n//   const { login } = useAuth();\n//   const navigate = useNavigate();\n//   const [formData, setFormData] = useState({\n//     email: \"\",\n//     password: \"\",\n//   });\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await loginEmployer(formData.email, formData.password);\n//       const userData = {\n//         email: formData.email,\n//         role: response.role,\n//         user_id: response.user_id,\n//         token: response.access_token\n//       };\n//       if (userData.role !== \"recruiter\") {\n//         alert(\"You are trying to log in as an employer with a job seeker account.\");\n//         return;\n//       }\n//       login(userData);\n//       // alert(\"Login successful!\");\n//       navigate(\"/my-posted-jobs\");\n//     } catch (error) {\n//       console.error(\"Login error:\", error);\n//       alert(error.response?.data?.detail || \"Invalid email or password.\");\n//     }\n//   };\n//   return (\n//     <div className=\"login-container\">\n//       <h2>Employer Login</h2>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"email\"\n//           name=\"email\"\n//           placeholder=\"Work Email\"\n//           value={formData.email}\n//           onChange={handleChange}\n//           required\n//         />\n//         <input\n//           type=\"password\"\n//           name=\"password\"\n//           placeholder=\"Password\"\n//           value={formData.password}\n//           onChange={handleChange}\n//           required\n//         />\n//         <button type=\"submit\">Login</button>\n//       </form>\n//       <p>Don't have an account? <a href=\"/employer-signup\">Sign up here</a></p>\n//     </div>\n//   );\n// };\n// export default EmployerLogin;\nimport React,{useState}from\"react\";// import { useNavigate } from \"react-router-dom\";\nimport{useAuth}from\"../context/AuthContext\";import{loginEmployer}from\"../services/api\";import\"../styles/EmployerLogin.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const EmployerLogin=()=>{const{login}=useAuth();// const navigate = useNavigate();\nconst[formData,setFormData]=useState({email:\"\",password:\"\"});const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const handleChange=e=>{const{name,value}=e.target;setFormData(_objectSpread(_objectSpread({},formData),{},{[name]:value}));};const handleSubmit=async e=>{e.preventDefault();setLoading(true);setError(null);try{// Call the API to log in as an employer\nconst response=await loginEmployer(formData.email,formData.password);// Ensure we have a valid response\nif(!response||!response.access_token){throw new Error(\"Invalid response from server\");}// Check if the user has the correct role\nif(response.role!==\"recruiter\"){setError(\"You are trying to log in as an employer with a job seeker account.\");setLoading(false);return;}// Create a properly formatted user data object for the login context\nconst userData={token:response.access_token,// Make sure token is mapped correctly\nrole:response.role,user_id:response.user_id,specific_id:response.specific_id};console.log(\"Formatted login data being passed to AuthContext:\",userData);// Log the user in (this will handle storing the token and redirecting)\nawait login(userData);}catch(error){var _error$response,_error$response$data;console.error(\"Login error:\",error);setError(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail)||\"Invalid email or password.\");}finally{setLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"login-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Employer Login\"}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"email\",name:\"email\",placeholder:\"Work Email\",value:formData.email,onChange:handleChange,required:true,disabled:loading}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",name:\"password\",placeholder:\"Password\",value:formData.password,onChange:handleChange,required:true,disabled:loading}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:loading,children:loading?\"Logging in...\":\"Login\"})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Don't have an account? \",/*#__PURE__*/_jsx(\"a\",{href:\"/employer-signup\",children:\"Sign up here\"})]})]});};export default EmployerLogin;","map":{"version":3,"names":["React","useState","useAuth","loginEmployer","jsx","_jsx","jsxs","_jsxs","EmployerLogin","login","formData","setFormData","email","password","loading","setLoading","error","setError","handleChange","e","name","value","target","_objectSpread","handleSubmit","preventDefault","response","access_token","Error","role","userData","token","user_id","specific_id","console","log","_error$response","_error$response$data","data","detail","className","children","onSubmit","type","placeholder","onChange","required","disabled","href"],"sources":["C:/final_year_project/app/frontend/src/pages/EmployerLogin.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { useAuth } from \"../context/AuthContext\";\r\n// import { loginEmployer } from \"../services/api\";\r\n// import \"../styles/EmployerLogin.css\";\r\n\r\n// const EmployerLogin = () => {\r\n//   const { login } = useAuth();\r\n//   const navigate = useNavigate();\r\n//   const [formData, setFormData] = useState({\r\n//     email: \"\",\r\n//     password: \"\",\r\n//   });\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const response = await loginEmployer(formData.email, formData.password);\r\n\r\n//       const userData = {\r\n//         email: formData.email,\r\n//         role: response.role,\r\n//         user_id: response.user_id,\r\n//         token: response.access_token\r\n//       };\r\n\r\n//       if (userData.role !== \"recruiter\") {\r\n//         alert(\"You are trying to log in as an employer with a job seeker account.\");\r\n//         return;\r\n//       }\r\n\r\n//       login(userData);\r\n//       // alert(\"Login successful!\");\r\n//       navigate(\"/my-posted-jobs\");\r\n//     } catch (error) {\r\n//       console.error(\"Login error:\", error);\r\n//       alert(error.response?.data?.detail || \"Invalid email or password.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"login-container\">\r\n//       <h2>Employer Login</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input\r\n//           type=\"email\"\r\n//           name=\"email\"\r\n//           placeholder=\"Work Email\"\r\n//           value={formData.email}\r\n//           onChange={handleChange}\r\n//           required\r\n//         />\r\n//         <input\r\n//           type=\"password\"\r\n//           name=\"password\"\r\n//           placeholder=\"Password\"\r\n//           value={formData.password}\r\n//           onChange={handleChange}\r\n//           required\r\n//         />\r\n//         <button type=\"submit\">Login</button>\r\n//       </form>\r\n//       <p>Don't have an account? <a href=\"/employer-signup\">Sign up here</a></p>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EmployerLogin;\r\n\r\nimport React, { useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\nimport { useAuth } from \"../context/AuthContext\";\r\nimport { loginEmployer } from \"../services/api\";\r\nimport \"../styles/EmployerLogin.css\";\r\n\r\nconst EmployerLogin = () => {\r\n  const { login } = useAuth();\r\n  // const navigate = useNavigate();\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Call the API to log in as an employer\r\n      const response = await loginEmployer(formData.email, formData.password);\r\n      \r\n      // Ensure we have a valid response\r\n      if (!response || !response.access_token) {\r\n        throw new Error(\"Invalid response from server\");\r\n      }\r\n      \r\n      // Check if the user has the correct role\r\n      if (response.role !== \"recruiter\") {\r\n        setError(\"You are trying to log in as an employer with a job seeker account.\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // Create a properly formatted user data object for the login context\r\n      const userData = {\r\n        token: response.access_token,  // Make sure token is mapped correctly\r\n        role: response.role,\r\n        user_id: response.user_id,\r\n        specific_id: response.specific_id\r\n      };\r\n      \r\n      console.log(\"Formatted login data being passed to AuthContext:\", userData);\r\n      \r\n      // Log the user in (this will handle storing the token and redirecting)\r\n      await login(userData);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      setError(error.response?.data?.detail || \"Invalid email or password.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <h2>Employer Login</h2>\r\n      \r\n      {error && (\r\n        <div className=\"error-message\">\r\n          {error}\r\n        </div>\r\n      )}\r\n      \r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          placeholder=\"Work Email\"\r\n          value={formData.email}\r\n          onChange={handleChange}\r\n          required\r\n          disabled={loading}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          value={formData.password}\r\n          onChange={handleChange}\r\n          required\r\n          disabled={loading}\r\n        />\r\n        <button type=\"submit\" disabled={loading}>\r\n          {loading ? \"Logging in...\" : \"Login\"}\r\n        </button>\r\n      </form>\r\n      <p>Don't have an account? <a href=\"/employer-signup\">Sign up here</a></p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployerLogin;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}