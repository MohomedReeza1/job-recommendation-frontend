{"ast":null,"code":"var _jsxFileName = \"C:\\\\final_year_project\\\\app\\\\frontend\\\\src\\\\pages\\\\JobsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { fetchJobs } from \"../services/api\";\nimport JobCard from \"../components/JobCard\";\nimport '../styles/JobsPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobsPage = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [retryCount, setRetryCount] = useState(0);\n  useEffect(() => {\n    const getJobs = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        console.log(\"Fetching jobs from API...\");\n        const jobsData = await fetchJobs();\n        console.log(`Successfully fetched ${jobsData.length} jobs`);\n        setJobs(jobsData);\n      } catch (error) {\n        console.error(\"Error fetching jobs:\", error);\n\n        // Provide a more user-friendly error message\n        let errorMessage = \"Failed to load jobs. Please try again later.\";\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          // that falls out of the range of 2xx\n          if (error.response.status === 401) {\n            errorMessage = \"You must be logged in to view jobs. Please log in and try again.\";\n          } else if (error.response.status === 403) {\n            errorMessage = \"You don't have permission to view these jobs.\";\n          } else if (error.response.status === 500) {\n            errorMessage = \"Server error occurred. Our team has been notified and is working on a fix.\";\n          } else if (error.response.status === 404) {\n            errorMessage = \"No jobs were found.\";\n          }\n        } else if (error.request) {\n          // The request was made but no response was received\n          errorMessage = \"Network error: Could not connect to server. Please check your internet connection.\";\n        }\n        setError(errorMessage);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getJobs();\n  }, [retryCount]);\n  const handleRetry = () => {\n    setRetryCount(prev => prev + 1);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jobs-container loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading available jobs...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jobs-container error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Oops! Something went wrong\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRetry,\n        className: \"retry-button\",\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"jobs-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Available Jobs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), jobs.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-jobs\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No jobs are currently available. Please check back later.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jobs-list\",\n      children: jobs.map(job => /*#__PURE__*/_jsxDEV(JobCard, {\n        job: job\n      }, job.job_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(JobsPage, \"eRTcCCGV/v7I88IQkHuz6s0rWaw=\");\n_c = JobsPage;\nexport default JobsPage;\nvar _c;\n$RefreshReg$(_c, \"JobsPage\");","map":{"version":3,"names":["React","useEffect","useState","fetchJobs","JobCard","jsxDEV","_jsxDEV","JobsPage","_s","jobs","setJobs","loading","setLoading","error","setError","retryCount","setRetryCount","getJobs","console","log","jobsData","length","errorMessage","response","status","request","handleRetry","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","job","job_id","_c","$RefreshReg$"],"sources":["C:/final_year_project/app/frontend/src/pages/JobsPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { fetchJobs } from \"../services/api\";\r\nimport JobCard from \"../components/JobCard\";\r\nimport '../styles/JobsPage.css';\r\n\r\nconst JobsPage = () => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [retryCount, setRetryCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const getJobs = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        console.log(\"Fetching jobs from API...\");\r\n        const jobsData = await fetchJobs();\r\n        console.log(`Successfully fetched ${jobsData.length} jobs`);\r\n        setJobs(jobsData);\r\n      } catch (error) {\r\n        console.error(\"Error fetching jobs:\", error);\r\n        \r\n        // Provide a more user-friendly error message\r\n        let errorMessage = \"Failed to load jobs. Please try again later.\";\r\n        \r\n        if (error.response) {\r\n          // The request was made and the server responded with a status code\r\n          // that falls out of the range of 2xx\r\n          if (error.response.status === 401) {\r\n            errorMessage = \"You must be logged in to view jobs. Please log in and try again.\";\r\n          } else if (error.response.status === 403) {\r\n            errorMessage = \"You don't have permission to view these jobs.\";\r\n          } else if (error.response.status === 500) {\r\n            errorMessage = \"Server error occurred. Our team has been notified and is working on a fix.\";\r\n          } else if (error.response.status === 404) {\r\n            errorMessage = \"No jobs were found.\";\r\n          }\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          errorMessage = \"Network error: Could not connect to server. Please check your internet connection.\";\r\n        }\r\n        \r\n        setError(errorMessage);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n  \r\n    getJobs();\r\n  }, [retryCount]);\r\n\r\n  const handleRetry = () => {\r\n    setRetryCount(prev => prev + 1);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"jobs-container loading\">\r\n        <h2>Loading available jobs...</h2>\r\n        <div className=\"loader\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"jobs-container error\">\r\n        <h2>Oops! Something went wrong</h2>\r\n        <p>{error}</p>\r\n        <button onClick={handleRetry} className=\"retry-button\">\r\n          Try Again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"jobs-container\">\r\n      <h2>Available Jobs</h2>\r\n      {jobs.length === 0 ? (\r\n        <div className=\"no-jobs\">\r\n          <p>No jobs are currently available. Please check back later.</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"jobs-list\">\r\n          {jobs.map((job) => (\r\n            <JobCard key={job.job_id} job={job} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}