{"ast":null,"code":"import{createContext,useContext,useState,useEffect}from\"react\";import{useNavigate}from\"react-router-dom\";import{fetchJobSeekerProfile,fetchRecruiterProfile,fetchAgencyIdForUser}from\"../services/api\";import{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[userProfile,setUserProfile]=useState(null);const[loading,setLoading]=useState(true);const navigate=useNavigate();// Load user data from localStorage on initial load\nuseEffect(()=>{const loadUser=async()=>{setLoading(true);try{const token=localStorage.getItem(\"token\");const role=localStorage.getItem(\"role\");const user_id=localStorage.getItem(\"user_id\");const specific_id=localStorage.getItem(\"specific_id\");console.log(\"Loading from localStorage:\",{token:!!token,role,user_id,specific_id});if(token&&role&&user_id){const userData={token,role,user_id,specific_id:specific_id||null};setUser(userData);try{// Load appropriate profile based on role\nif(role===\"job_seeker\"){const profileData=await fetchJobSeekerProfile();if(profileData){setUserProfile(profileData);}}else if(role===\"recruiter\"){const profileData=await fetchRecruiterProfile();if(profileData){setUserProfile(profileData);}}}catch(error){console.error(\"Error loading profile on app start:\",error);}}}catch(error){console.error(\"Error loading user:\",error);localStorage.removeItem(\"token\");localStorage.removeItem(\"role\");localStorage.removeItem(\"user_id\");localStorage.removeItem(\"specific_id\");}finally{setLoading(false);}};loadUser();},[]);const login=async userData=>{try{// Enhanced validation with detailed logging\nif(!userData){console.error(\"userData is completely missing\");throw new Error(\"Invalid login data received: userData is null or undefined\");}// Log the input data exactly as received\nconsole.log(\"Login data received:\",userData);// Verify token existence with better debug info\nconst token=userData.token||userData.access_token;if(!token){console.error(\"No token found in userData:\",userData);throw new Error(\"Invalid login data received: No token found\");}// Extract other essential data\nconst userId=userData.user_id;const role=userData.role;// Additional validation\nif(!userId||!role){console.error(\"Missing critical data:\",{userId,role});throw new Error(\"Invalid login data: Missing user_id or role\");}// Save the basic user data immediately\nlocalStorage.setItem(\"token\",token);localStorage.setItem(\"role\",role);localStorage.setItem(\"user_id\",userId);// Extract specific_id directly from response if available\nlet specificId=userData.specific_id;console.log(\"Raw specific_id from response:\",specificId,\"Type:\",typeof specificId);// If specific_id is missing, fetch it based on role\nif((!specificId||specificId===undefined||specificId===null)&&role===\"recruiter\"){console.log(\"specific_id is missing in login response, attempting to fetch it\");try{specificId=await fetchAgencyIdForUser();console.log(\"Fetched specific_id for recruiter:\",specificId);if(specificId){// Update the userData object with the fetched specific_id\nuserData.specific_id=specificId;}}catch(fetchError){console.error(\"Error fetching specific_id:\",fetchError);}}// Now save specific_id to localStorage if we have it\nif(specificId!==undefined&&specificId!==null){const specificIdString=String(specificId);console.log(\"Saving specific_id to localStorage:\",specificIdString);localStorage.setItem(\"specific_id\",specificIdString);}else{console.warn(\"Could not determine specific_id\");localStorage.setItem(\"specific_id\",\"\");}// For debugging - check what was stored\nconsole.log(\"Verifying localStorage after saving:\");console.log(\"- token:\",localStorage.getItem(\"token\")?\"saved\":\"missing\");console.log(\"- role:\",localStorage.getItem(\"role\"));console.log(\"- user_id:\",localStorage.getItem(\"user_id\"));console.log(\"- specific_id:\",localStorage.getItem(\"specific_id\"));// Create user object with consistent properties\nconst userObject={token:token,role:role,user_id:userId,specific_id:specificId};setUser(userObject);// Also load the profile data based on role\ntry{if(role===\"job_seeker\"){const profileData=await fetchJobSeekerProfile();setUserProfile(profileData);}else if(role===\"recruiter\"){const profileData=await fetchRecruiterProfile();setUserProfile(profileData);}}catch(profileError){console.error(\"Error loading profile after login:\",profileError);}// Redirect based on role\nif(role===\"job_seeker\"){navigate(\"/jobs\");}else if(role===\"recruiter\"){navigate(\"/my-posted-jobs\");}}catch(error){console.error(\"Login failed:\",error);alert(\"Login failed. Please try again: \"+error.message);}};const logout=()=>{localStorage.removeItem(\"token\");localStorage.removeItem(\"role\");localStorage.removeItem(\"user_id\");localStorage.removeItem(\"specific_id\");setUser(null);setUserProfile(null);navigate(\"/login\");};const updateProfile=newProfileData=>{setUserProfile(newProfileData);};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,userProfile,login,logout,updateProfile,loading},children:children});};export const useAuth=()=>useContext(AuthContext);","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useNavigate","fetchJobSeekerProfile","fetchRecruiterProfile","fetchAgencyIdForUser","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","userProfile","setUserProfile","loading","setLoading","navigate","loadUser","token","localStorage","getItem","role","user_id","specific_id","console","log","userData","profileData","error","removeItem","login","Error","access_token","userId","setItem","specificId","undefined","fetchError","specificIdString","String","warn","userObject","profileError","alert","message","logout","updateProfile","newProfileData","Provider","value","useAuth"],"sources":["C:/final_year_project/app/frontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { fetchJobSeekerProfile, fetchRecruiterProfile, fetchAgencyIdForUser } from \"../services/api\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [userProfile, setUserProfile] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const navigate = useNavigate();\r\n\r\n    // Load user data from localStorage on initial load\r\n    useEffect(() => {\r\n        const loadUser = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const token = localStorage.getItem(\"token\");\r\n                const role = localStorage.getItem(\"role\");\r\n                const user_id = localStorage.getItem(\"user_id\");\r\n                const specific_id = localStorage.getItem(\"specific_id\");\r\n\r\n                console.log(\"Loading from localStorage:\", { token: !!token, role, user_id, specific_id });\r\n\r\n                if (token && role && user_id) {\r\n                    const userData = { \r\n                        token, \r\n                        role, \r\n                        user_id, \r\n                        specific_id: specific_id || null \r\n                    };\r\n                    setUser(userData);\r\n                    \r\n                    try {\r\n                        // Load appropriate profile based on role\r\n                        if (role === \"job_seeker\") {\r\n                            const profileData = await fetchJobSeekerProfile();\r\n                            if (profileData) {\r\n                                setUserProfile(profileData);\r\n                            }\r\n                        } else if (role === \"recruiter\") {\r\n                            const profileData = await fetchRecruiterProfile();\r\n                            if (profileData) {\r\n                                setUserProfile(profileData);\r\n                            }\r\n                        }\r\n                    } catch (error) {\r\n                        console.error(\"Error loading profile on app start:\", error);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error loading user:\", error);\r\n                localStorage.removeItem(\"token\");\r\n                localStorage.removeItem(\"role\");\r\n                localStorage.removeItem(\"user_id\");\r\n                localStorage.removeItem(\"specific_id\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        loadUser();\r\n    }, []);\r\n    \r\n    const login = async (userData) => {\r\n        try {\r\n            // Enhanced validation with detailed logging\r\n            if (!userData) {\r\n                console.error(\"userData is completely missing\");\r\n                throw new Error(\"Invalid login data received: userData is null or undefined\");\r\n            }\r\n            \r\n            // Log the input data exactly as received\r\n            console.log(\"Login data received:\", userData);\r\n            \r\n            // Verify token existence with better debug info\r\n            const token = userData.token || userData.access_token;\r\n            if (!token) {\r\n                console.error(\"No token found in userData:\", userData);\r\n                throw new Error(\"Invalid login data received: No token found\");\r\n            }\r\n            \r\n            // Extract other essential data\r\n            const userId = userData.user_id;\r\n            const role = userData.role;\r\n            \r\n            // Additional validation\r\n            if (!userId || !role) {\r\n                console.error(\"Missing critical data:\", { userId, role });\r\n                throw new Error(\"Invalid login data: Missing user_id or role\");\r\n            }\r\n            \r\n            // Save the basic user data immediately\r\n            localStorage.setItem(\"token\", token);\r\n            localStorage.setItem(\"role\", role);\r\n            localStorage.setItem(\"user_id\", userId);\r\n            \r\n            // Extract specific_id directly from response if available\r\n            let specificId = userData.specific_id;\r\n            console.log(\"Raw specific_id from response:\", specificId, \"Type:\", typeof specificId);\r\n            \r\n            // If specific_id is missing, fetch it based on role\r\n            if ((!specificId || specificId === undefined || specificId === null) && role === \"recruiter\") {\r\n                console.log(\"specific_id is missing in login response, attempting to fetch it\");\r\n                \r\n                try {\r\n                    specificId = await fetchAgencyIdForUser();\r\n                    console.log(\"Fetched specific_id for recruiter:\", specificId);\r\n                    \r\n                    if (specificId) {\r\n                        // Update the userData object with the fetched specific_id\r\n                        userData.specific_id = specificId;\r\n                    }\r\n                } catch (fetchError) {\r\n                    console.error(\"Error fetching specific_id:\", fetchError);\r\n                }\r\n            }\r\n            \r\n            // Now save specific_id to localStorage if we have it\r\n            if (specificId !== undefined && specificId !== null) {\r\n                const specificIdString = String(specificId);\r\n                console.log(\"Saving specific_id to localStorage:\", specificIdString);\r\n                localStorage.setItem(\"specific_id\", specificIdString);\r\n            } else {\r\n                console.warn(\"Could not determine specific_id\");\r\n                localStorage.setItem(\"specific_id\", \"\");\r\n            }\r\n            \r\n            // For debugging - check what was stored\r\n            console.log(\"Verifying localStorage after saving:\");\r\n            console.log(\"- token:\", localStorage.getItem(\"token\") ? \"saved\" : \"missing\");\r\n            console.log(\"- role:\", localStorage.getItem(\"role\"));\r\n            console.log(\"- user_id:\", localStorage.getItem(\"user_id\"));\r\n            console.log(\"- specific_id:\", localStorage.getItem(\"specific_id\"));\r\n            \r\n            // Create user object with consistent properties\r\n            const userObject = {\r\n                token: token,\r\n                role: role,\r\n                user_id: userId,\r\n                specific_id: specificId\r\n            };\r\n            \r\n            setUser(userObject);\r\n            \r\n            // Also load the profile data based on role\r\n            try {\r\n                if (role === \"job_seeker\") {\r\n                    const profileData = await fetchJobSeekerProfile();\r\n                    setUserProfile(profileData);\r\n                } else if (role === \"recruiter\") {\r\n                    const profileData = await fetchRecruiterProfile();\r\n                    setUserProfile(profileData);\r\n                }\r\n            } catch (profileError) {\r\n                console.error(\"Error loading profile after login:\", profileError);\r\n            }\r\n            \r\n            // Redirect based on role\r\n            if (role === \"job_seeker\") {\r\n                navigate(\"/jobs\");\r\n            } else if (role === \"recruiter\") {\r\n                navigate(\"/my-posted-jobs\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Login failed:\", error);\r\n            alert(\"Login failed. Please try again: \" + error.message);\r\n        }\r\n    };\r\n  \r\n    const logout = () => {\r\n        localStorage.removeItem(\"token\");\r\n        localStorage.removeItem(\"role\");\r\n        localStorage.removeItem(\"user_id\");\r\n        localStorage.removeItem(\"specific_id\");\r\n        setUser(null);\r\n        setUserProfile(null);\r\n        navigate(\"/login\");\r\n    };\r\n\r\n    const updateProfile = (newProfileData) => {\r\n        setUserProfile(newProfileData);\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ \r\n            user, \r\n            userProfile, \r\n            login, \r\n            logout, \r\n            updateProfile, \r\n            loading \r\n        }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}