{"ast":null,"code":"var _jsxFileName = \"C:\\\\final_year_project\\\\app\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useState, useEffect } from \"react\";\n// import { loginJobSeeker, loginEmployer } from \"../services/api\";\n\n// const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//     const [user, setUser] = useState(() => {\n//         const storedUser = localStorage.getItem(\"user\");\n//         return storedUser ? JSON.parse(storedUser) : null;\n//     });\n\n//     const login = async (email, password, role) => {\n//         try {\n//             const data = role === \"job_seeker\"\n//                 ? await loginJobSeeker(email, password)\n//                 : await loginEmployer(email, password);\n\n//             const newUser = {\n//                 email,\n//                 role: data.role,\n//                 user_id: data.user_id,  // Ensure this is correctly retrieved\n//                 token: data.access_token\n//             };\n\n//             setUser(newUser);\n//             localStorage.setItem(\"user\", JSON.stringify(newUser));\n//             localStorage.setItem(\"token\", data.access_token);\n//         } catch (error) {\n//             throw new Error(\"Invalid credentials.\");\n//         }\n//     };\n\n//     const logout = () => {\n//         setUser(null);\n//         localStorage.removeItem(\"user\");\n//         localStorage.removeItem(\"token\");\n//     };\n\n//     useEffect(() => {\n//       console.log(\"Logged in user data:\", user); // Debugging line\n//     }, [user]);\n\n//     return (\n//         <AuthContext.Provider value={{ user, login, logout }}>\n//             {children}\n//         </AuthContext.Provider>\n//     );\n// };\n\n// export const useAuth = () => useContext(AuthContext);\n\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // ✅ Import useNavigate\nimport { loginJobSeeker, loginEmployer } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const navigate = useNavigate(); // ✅ Use navigate inside the function\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    const role = localStorage.getItem(\"role\");\n    const user_id = localStorage.getItem(\"user_id\");\n    if (token && role) {\n      setUser({\n        token,\n        role,\n        user_id\n      });\n    }\n  }, []);\n\n  // const login = async (email, password, role) => {\n  //     try {\n  //         let response;\n  //         if (role === \"job_seeker\") {\n  //             response = await loginJobSeeker(email, password);\n  //         } else if (role === \"recruiter\") {\n  //             response = await loginEmployer(email, password);\n  //         }\n\n  //         const { access_token, role: userRole, user_id } = response.data;\n\n  //         localStorage.setItem(\"token\", access_token);\n  //         localStorage.setItem(\"role\", userRole);\n  //         localStorage.setItem(\"user_id\", user_id);\n\n  //         setUser({ email, role: userRole, token: access_token, user_id });\n\n  //         if (userRole === \"job_seeker\") {\n  //             navigate(\"/jobs\"); // ✅ Use navigate correctly\n  //         } else {\n  //             navigate(\"/my-posted-jobs\"); // ✅ Use navigate correctly\n  //         }\n  //     } catch (error) {\n  //         console.error(\"Login failed:\", error);\n  //         alert(\"Invalid credentials.\");\n  //     }\n  // };\n\n  const login = async userData => {\n    try {\n      if (!userData || !userData.token) {\n        throw new Error(\"Invalid login data received\");\n      }\n\n      // Store user details in localStorage\n      localStorage.setItem(\"token\", userData.token);\n      localStorage.setItem(\"role\", userData.role);\n      localStorage.setItem(\"user_id\", userData.user_id);\n      setUser(userData);\n      console.log(\"User logged in:\", userData); // Debugging log\n\n      // Redirect after login based on role\n      if (userData.role === \"job_seeker\") {\n        navigate(\"/jobs\");\n      } else if (userData.role === \"recruiter\") {\n        navigate(\"/my-posted-jobs\");\n      }\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      alert(\"Login failed. Please try again.\");\n    }\n  };\n  const logout = () => {\n    localStorage.clear();\n    setUser(null);\n    navigate(\"/login\"); // ✅ Use navigate on logout\n  };\n  useEffect(() => {\n    console.log(\"Logged in user data:\", user); // Debugging line\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"srIFY1u6FdjfSU7RNq++BxpLW7k=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useNavigate","loginJobSeeker","loginEmployer","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","navigate","token","localStorage","getItem","role","user_id","login","userData","Error","setItem","console","log","error","alert","logout","clear","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/final_year_project/app/frontend/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n// import { loginJobSeeker, loginEmployer } from \"../services/api\";\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//     const [user, setUser] = useState(() => {\r\n//         const storedUser = localStorage.getItem(\"user\");\r\n//         return storedUser ? JSON.parse(storedUser) : null;\r\n//     });\r\n\r\n//     const login = async (email, password, role) => {\r\n//         try {\r\n//             const data = role === \"job_seeker\"\r\n//                 ? await loginJobSeeker(email, password)\r\n//                 : await loginEmployer(email, password);\r\n            \r\n//             const newUser = {\r\n//                 email,\r\n//                 role: data.role,\r\n//                 user_id: data.user_id,  // Ensure this is correctly retrieved\r\n//                 token: data.access_token\r\n//             };\r\n\r\n//             setUser(newUser);\r\n//             localStorage.setItem(\"user\", JSON.stringify(newUser));\r\n//             localStorage.setItem(\"token\", data.access_token);\r\n//         } catch (error) {\r\n//             throw new Error(\"Invalid credentials.\");\r\n//         }\r\n//     };\r\n\r\n//     const logout = () => {\r\n//         setUser(null);\r\n//         localStorage.removeItem(\"user\");\r\n//         localStorage.removeItem(\"token\");\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//       console.log(\"Logged in user data:\", user); // Debugging line\r\n//     }, [user]);\r\n\r\n//     return (\r\n//         <AuthContext.Provider value={{ user, login, logout }}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     );\r\n// };\r\n\r\n// export const useAuth = () => useContext(AuthContext);\r\n\r\n\r\nimport { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\"; // ✅ Import useNavigate\r\nimport { loginJobSeeker, loginEmployer } from \"../services/api\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const navigate = useNavigate(); // ✅ Use navigate inside the function\r\n\r\n    useEffect(() => {\r\n        const token = localStorage.getItem(\"token\");\r\n        const role = localStorage.getItem(\"role\");\r\n        const user_id = localStorage.getItem(\"user_id\");\r\n\r\n        if (token && role) {\r\n            setUser({ token, role, user_id });\r\n        }\r\n    }, []);\r\n\r\n    // const login = async (email, password, role) => {\r\n    //     try {\r\n    //         let response;\r\n    //         if (role === \"job_seeker\") {\r\n    //             response = await loginJobSeeker(email, password);\r\n    //         } else if (role === \"recruiter\") {\r\n    //             response = await loginEmployer(email, password);\r\n    //         }\r\n\r\n    //         const { access_token, role: userRole, user_id } = response.data;\r\n\r\n    //         localStorage.setItem(\"token\", access_token);\r\n    //         localStorage.setItem(\"role\", userRole);\r\n    //         localStorage.setItem(\"user_id\", user_id);\r\n\r\n    //         setUser({ email, role: userRole, token: access_token, user_id });\r\n\r\n    //         if (userRole === \"job_seeker\") {\r\n    //             navigate(\"/jobs\"); // ✅ Use navigate correctly\r\n    //         } else {\r\n    //             navigate(\"/my-posted-jobs\"); // ✅ Use navigate correctly\r\n    //         }\r\n    //     } catch (error) {\r\n    //         console.error(\"Login failed:\", error);\r\n    //         alert(\"Invalid credentials.\");\r\n    //     }\r\n    // };\r\n\r\n    const login = async (userData) => {\r\n      try {\r\n          if (!userData || !userData.token) {\r\n              throw new Error(\"Invalid login data received\");\r\n          }\r\n  \r\n          // Store user details in localStorage\r\n          localStorage.setItem(\"token\", userData.token);\r\n          localStorage.setItem(\"role\", userData.role);\r\n          localStorage.setItem(\"user_id\", userData.user_id);\r\n  \r\n          setUser(userData);\r\n  \r\n          console.log(\"User logged in:\", userData); // Debugging log\r\n  \r\n          // Redirect after login based on role\r\n          if (userData.role === \"job_seeker\") {\r\n              navigate(\"/jobs\");\r\n          } else if (userData.role === \"recruiter\") {\r\n              navigate(\"/my-posted-jobs\");\r\n          }\r\n      } catch (error) {\r\n          console.error(\"Login failed:\", error);\r\n          alert(\"Login failed. Please try again.\");\r\n      }\r\n    };\r\n  \r\n    const logout = () => {\r\n        localStorage.clear();\r\n        setUser(null);\r\n        navigate(\"/login\"); // ✅ Use navigate on logout\r\n    };\r\n\r\n    useEffect(() => {\r\n      console.log(\"Logged in user data:\", user); // Debugging line\r\n    }, [user]);\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}