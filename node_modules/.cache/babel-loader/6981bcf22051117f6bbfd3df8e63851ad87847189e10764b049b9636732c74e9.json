{"ast":null,"code":"var _jsxFileName = \"C:\\\\final_year_project\\\\app\\\\frontend\\\\src\\\\pages\\\\JobsPage.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { fetchJobs } from \"../services/api\";\n// import JobCard from \"../components/JobCard\";\n// import '../styles/JobsPage.css';\n\n// const JobsPage = () => {\n//   const [jobs, setJobs] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [retryCount, setRetryCount] = useState(0);\n\n//   useEffect(() => {\n//     const getJobs = async () => {\n//       try {\n//         setLoading(true);\n//         setError(null);\n//         console.log(\"Fetching jobs from API...\");\n//         const jobsData = await fetchJobs();\n//         console.log(`Successfully fetched ${jobsData.length} jobs`);\n//         setJobs(jobsData);\n//       } catch (error) {\n//         console.error(\"Error fetching jobs:\", error);\n\n//         // Provide a more user-friendly error message\n//         let errorMessage = \"Failed to load jobs. Please try again later.\";\n\n//         if (error.response) {\n//           // The request was made and the server responded with a status code\n//           // that falls out of the range of 2xx\n//           if (error.response.status === 401) {\n//             errorMessage = \"You must be logged in to view jobs. Please log in and try again.\";\n//           } else if (error.response.status === 403) {\n//             errorMessage = \"You don't have permission to view these jobs.\";\n//           } else if (error.response.status === 500) {\n//             errorMessage = \"Server error occurred. Our team has been notified and is working on a fix.\";\n//           } else if (error.response.status === 404) {\n//             errorMessage = \"No jobs were found.\";\n//           }\n//         } else if (error.request) {\n//           // The request was made but no response was received\n//           errorMessage = \"Network error: Could not connect to server. Please check your internet connection.\";\n//         }\n\n//         setError(errorMessage);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     getJobs();\n//   }, [retryCount]);\n\n//   const handleRetry = () => {\n//     setRetryCount(prev => prev + 1);\n//   };\n\n//   if (loading) {\n//     return (\n//       <div className=\"jobs-container loading\">\n//         <h2>Loading available jobs...</h2>\n//         <div className=\"loader\"></div>\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <div className=\"jobs-container error\">\n//         <h2>Oops! Something went wrong</h2>\n//         <p>{error}</p>\n//         <button onClick={handleRetry} className=\"retry-button\">\n//           Try Again\n//         </button>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"jobs-container\">\n//       <h2>Available Jobs</h2>\n//       {jobs.length === 0 ? (\n//         <div className=\"no-jobs\">\n//           <p>No jobs are currently available. Please check back later.</p>\n//         </div>\n//       ) : (\n//         <div className=\"jobs-list\">\n//           {jobs.map((job) => (\n//             <JobCard key={job.job_id} job={job} />\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default JobsPage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchJobs, checkApiHealth, directFetchJobs } from \"../services/api\";\nimport JobCard from \"../components/JobCard\";\nimport '../styles/JobsPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobsPage = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [healthStatus, setHealthStatus] = useState(null);\n  const [debugInfo, setDebugInfo] = useState({});\n\n  // Check API health first, then fetch jobs\n  useEffect(() => {\n    const checkHealth = async () => {\n      try {\n        const health = await checkApiHealth();\n        setHealthStatus(health);\n        if (health.ok) {\n          console.log(\"API health check passed, proceeding to fetch jobs\");\n          await getJobs();\n        } else {\n          console.error(\"API health check failed:\", health);\n          setError(`API health check failed: ${health.error || 'Unknown error'}`);\n          setLoading(false);\n        }\n      } catch (err) {\n        console.error(\"Health check error:\", err);\n        setHealthStatus({\n          ok: false,\n          error: err.message\n        });\n\n        // Try fetching jobs anyway\n        await getJobs();\n      }\n    };\n    checkHealth();\n  }, []);\n  const getJobs = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Collect some debug info\n      const debug = {\n        url: process.env.REACT_APP_API_BASE_URL || \"Not set in environment\",\n        browser: navigator.userAgent,\n        timestamp: new Date().toISOString()\n      };\n      console.log(\"Fetching jobs with debug info:\", debug);\n      setDebugInfo(debug);\n\n      // Try to fetch jobs\n      const jobsData = await fetchJobs();\n      if (Array.isArray(jobsData)) {\n        console.log(`Successfully fetched ${jobsData.length} jobs`);\n        setJobs(jobsData);\n      } else {\n        console.error(\"Unexpected response format:\", jobsData);\n        setError(`Received invalid data format: ${JSON.stringify(jobsData).slice(0, 100)}...`);\n      }\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3;\n      console.error(\"Error fetching jobs:\", error);\n\n      // More detailed error message based on the error type\n      if (error.message.includes(\"Network Error\") || error.message.includes(\"Failed to fetch\")) {\n        setError(\"Network error: Could not connect to server. Please check if the API server is running and accessible.\");\n      } else if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        setError(\"Authentication error: You must be logged in to view jobs.\");\n      } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n        setError(\"Permission error: You don't have access to view these jobs.\");\n      } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 500) {\n        setError(\"Server error: The server encountered an internal error. Please try again later.\");\n      } else {\n        setError(`Error: ${error.message}`);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleTryAgain = () => {\n    getJobs();\n  };\n\n  // Loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jobs-container loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading available jobs...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Checking connection to: \", debugInfo.url]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Error state with debugging info\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jobs-container error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Oops! Something went wrong\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Debug Information\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"API URL:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 17\n            }, this), \" \", debugInfo.url]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Health Check:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this), \" \", healthStatus ? healthStatus.ok ? \"Passed\" : \"Failed\" : \"Not run\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Browser:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this), \" \", debugInfo.browser]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this), \" \", debugInfo.timestamp]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"troubleshooting\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"CORS Issues?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"If you're experiencing CORS errors, try these steps:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Verify that your backend CORS configuration includes '\", window.location.origin, \"' as an allowed origin\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Check that your API is running and accessible\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Try accessing the API directly in a new browser tab\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: async () => {\n          try {\n            const data = await directFetchJobs();\n            alert(`Direct fetch successful! Retrieved ${data.length} jobs.`);\n          } catch (err) {\n            alert(`Direct fetch failed: ${err.message}`);\n          }\n        },\n        className: \"debug-button\",\n        children: \"Test Direct API Call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleTryAgain,\n        className: \"retry-button\",\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Success state\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"jobs-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Available Jobs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), jobs.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-jobs\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No jobs are currently available. Please check back later.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jobs-list\",\n      children: jobs.map(job => /*#__PURE__*/_jsxDEV(JobCard, {\n        job: job\n      }, job.job_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n};\n_s(JobsPage, \"aKlV3OSw5enf4Dn5hUj88YrbM+o=\");\n_c = JobsPage;\nexport default JobsPage;\nvar _c;\n$RefreshReg$(_c, \"JobsPage\");","map":{"version":3,"names":["React","useEffect","useState","fetchJobs","checkApiHealth","directFetchJobs","JobCard","jsxDEV","_jsxDEV","JobsPage","_s","jobs","setJobs","loading","setLoading","error","setError","healthStatus","setHealthStatus","debugInfo","setDebugInfo","checkHealth","health","ok","console","log","getJobs","err","message","debug","url","process","env","REACT_APP_API_BASE_URL","browser","navigator","userAgent","timestamp","Date","toISOString","jobsData","Array","isArray","length","JSON","stringify","slice","_error$response","_error$response2","_error$response3","includes","response","status","handleTryAgain","className","children","fileName","_jsxFileName","lineNumber","columnNumber","window","location","origin","onClick","data","alert","map","job","job_id","_c","$RefreshReg$"],"sources":["C:/final_year_project/app/frontend/src/pages/JobsPage.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { fetchJobs } from \"../services/api\";\r\n// import JobCard from \"../components/JobCard\";\r\n// import '../styles/JobsPage.css';\r\n\r\n// const JobsPage = () => {\r\n//   const [jobs, setJobs] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [retryCount, setRetryCount] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     const getJobs = async () => {\r\n//       try {\r\n//         setLoading(true);\r\n//         setError(null);\r\n//         console.log(\"Fetching jobs from API...\");\r\n//         const jobsData = await fetchJobs();\r\n//         console.log(`Successfully fetched ${jobsData.length} jobs`);\r\n//         setJobs(jobsData);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching jobs:\", error);\r\n        \r\n//         // Provide a more user-friendly error message\r\n//         let errorMessage = \"Failed to load jobs. Please try again later.\";\r\n        \r\n//         if (error.response) {\r\n//           // The request was made and the server responded with a status code\r\n//           // that falls out of the range of 2xx\r\n//           if (error.response.status === 401) {\r\n//             errorMessage = \"You must be logged in to view jobs. Please log in and try again.\";\r\n//           } else if (error.response.status === 403) {\r\n//             errorMessage = \"You don't have permission to view these jobs.\";\r\n//           } else if (error.response.status === 500) {\r\n//             errorMessage = \"Server error occurred. Our team has been notified and is working on a fix.\";\r\n//           } else if (error.response.status === 404) {\r\n//             errorMessage = \"No jobs were found.\";\r\n//           }\r\n//         } else if (error.request) {\r\n//           // The request was made but no response was received\r\n//           errorMessage = \"Network error: Could not connect to server. Please check your internet connection.\";\r\n//         }\r\n        \r\n//         setError(errorMessage);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n  \r\n//     getJobs();\r\n//   }, [retryCount]);\r\n\r\n//   const handleRetry = () => {\r\n//     setRetryCount(prev => prev + 1);\r\n//   };\r\n\r\n//   if (loading) {\r\n//     return (\r\n//       <div className=\"jobs-container loading\">\r\n//         <h2>Loading available jobs...</h2>\r\n//         <div className=\"loader\"></div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   if (error) {\r\n//     return (\r\n//       <div className=\"jobs-container error\">\r\n//         <h2>Oops! Something went wrong</h2>\r\n//         <p>{error}</p>\r\n//         <button onClick={handleRetry} className=\"retry-button\">\r\n//           Try Again\r\n//         </button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"jobs-container\">\r\n//       <h2>Available Jobs</h2>\r\n//       {jobs.length === 0 ? (\r\n//         <div className=\"no-jobs\">\r\n//           <p>No jobs are currently available. Please check back later.</p>\r\n//         </div>\r\n//       ) : (\r\n//         <div className=\"jobs-list\">\r\n//           {jobs.map((job) => (\r\n//             <JobCard key={job.job_id} job={job} />\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default JobsPage;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { fetchJobs, checkApiHealth, directFetchJobs } from \"../services/api\";\r\nimport JobCard from \"../components/JobCard\";\r\nimport '../styles/JobsPage.css';\r\n\r\nconst JobsPage = () => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [healthStatus, setHealthStatus] = useState(null);\r\n  const [debugInfo, setDebugInfo] = useState({});\r\n  \r\n  // Check API health first, then fetch jobs\r\n  useEffect(() => {\r\n    const checkHealth = async () => {\r\n      try {\r\n        const health = await checkApiHealth();\r\n        setHealthStatus(health);\r\n        \r\n        if (health.ok) {\r\n          console.log(\"API health check passed, proceeding to fetch jobs\");\r\n          await getJobs();\r\n        } else {\r\n          console.error(\"API health check failed:\", health);\r\n          setError(`API health check failed: ${health.error || 'Unknown error'}`);\r\n          setLoading(false);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Health check error:\", err);\r\n        setHealthStatus({ ok: false, error: err.message });\r\n        \r\n        // Try fetching jobs anyway\r\n        await getJobs();\r\n      }\r\n    };\r\n    \r\n    checkHealth();\r\n  }, []);\r\n  \r\n  const getJobs = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // Collect some debug info\r\n      const debug = {\r\n        url: process.env.REACT_APP_API_BASE_URL || \"Not set in environment\",\r\n        browser: navigator.userAgent,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n      console.log(\"Fetching jobs with debug info:\", debug);\r\n      setDebugInfo(debug);\r\n      \r\n      // Try to fetch jobs\r\n      const jobsData = await fetchJobs();\r\n      \r\n      if (Array.isArray(jobsData)) {\r\n        console.log(`Successfully fetched ${jobsData.length} jobs`);\r\n        setJobs(jobsData);\r\n      } else {\r\n        console.error(\"Unexpected response format:\", jobsData);\r\n        setError(`Received invalid data format: ${JSON.stringify(jobsData).slice(0, 100)}...`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching jobs:\", error);\r\n      \r\n      // More detailed error message based on the error type\r\n      if (error.message.includes(\"Network Error\") || error.message.includes(\"Failed to fetch\")) {\r\n        setError(\"Network error: Could not connect to server. Please check if the API server is running and accessible.\");\r\n      } else if (error.response?.status === 401) {\r\n        setError(\"Authentication error: You must be logged in to view jobs.\");\r\n      } else if (error.response?.status === 403) {\r\n        setError(\"Permission error: You don't have access to view these jobs.\");\r\n      } else if (error.response?.status === 500) {\r\n        setError(\"Server error: The server encountered an internal error. Please try again later.\");\r\n      } else {\r\n        setError(`Error: ${error.message}`);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleTryAgain = () => {\r\n    getJobs();\r\n  };\r\n\r\n  // Loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"jobs-container loading\">\r\n        <h2>Loading available jobs...</h2>\r\n        <div className=\"loader\"></div>\r\n        <p>Checking connection to: {debugInfo.url}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Error state with debugging info\r\n  if (error) {\r\n    return (\r\n      <div className=\"jobs-container error\">\r\n        <h2>Oops! Something went wrong</h2>\r\n        <p>{error}</p>\r\n        \r\n        {/* Debugging information */}\r\n        <div className=\"debug-info\">\r\n          <h3>Debug Information</h3>\r\n          <ul>\r\n            <li><strong>API URL:</strong> {debugInfo.url}</li>\r\n            <li><strong>Health Check:</strong> {healthStatus ? (healthStatus.ok ? \"Passed\" : \"Failed\") : \"Not run\"}</li>\r\n            <li><strong>Browser:</strong> {debugInfo.browser}</li>\r\n            <li><strong>Time:</strong> {debugInfo.timestamp}</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        {/* CORS Troubleshooting Guide */}\r\n        <div className=\"troubleshooting\">\r\n          <h3>CORS Issues?</h3>\r\n          <p>If you're experiencing CORS errors, try these steps:</p>\r\n          <ol>\r\n            <li>Verify that your backend CORS configuration includes '{window.location.origin}' as an allowed origin</li>\r\n            <li>Check that your API is running and accessible</li>\r\n            <li>Try accessing the API directly in a new browser tab</li>\r\n          </ol>\r\n        </div>\r\n        \r\n        {/* Make a direct CORS request for testing */}\r\n        <button onClick={async () => {\r\n          try {\r\n            const data = await directFetchJobs();\r\n            alert(`Direct fetch successful! Retrieved ${data.length} jobs.`);\r\n          } catch (err) {\r\n            alert(`Direct fetch failed: ${err.message}`);\r\n          }\r\n        }} className=\"debug-button\">\r\n          Test Direct API Call\r\n        </button>\r\n        \r\n        <button onClick={handleTryAgain} className=\"retry-button\">\r\n          Try Again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Success state\r\n  return (\r\n    <div className=\"jobs-container\">\r\n      <h2>Available Jobs</h2>\r\n      {jobs.length === 0 ? (\r\n        <div className=\"no-jobs\">\r\n          <p>No jobs are currently available. Please check back later.</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"jobs-list\">\r\n          {jobs.map((job) => (\r\n            <JobCard key={job.job_id} job={job} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}