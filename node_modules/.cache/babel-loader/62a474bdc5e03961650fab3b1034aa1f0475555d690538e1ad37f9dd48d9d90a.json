{"ast":null,"code":"var _jsxFileName = \"C:\\\\final_year_project\\\\app\\\\frontend\\\\src\\\\pages\\\\JobSeekerLogin.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { api } from \"../services/api\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/JobSeekerLogin.css\";\nimport { useAuth } from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobSeekerLogin = () => {\n  _s();\n  const {\n    login\n  } = useAuth();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   try {\n  //     const response = await api.post(\"/auth/login\", new URLSearchParams({\n  //       username: formData.email,\n  //       password: formData.password,\n  //     }),\n  //     {\n  //       headers: {\n  //         \"Content-Type\": \"application/x-www-form-urlencoded\"\n  //       }\n  //     }\n\n  //   );\n  //     const userData = {\n  //       email: formData.email,\n  //       role: response.data.role,\n  //       user_id: response.data.user_id,\n  //       token: response.data.access_token\n  //     };\n\n  //     if (userData.role !== \"job_seeker\") {\n  //       alert(\"You are trying to log in as a job seeker with an employer account.\");\n  //       return;\n  //     }\n\n  //     login(userData);\n\n  //     alert(\"Login successful!\");\n  //     navigate(\"/jobs\");\n  //   } catch (error) {\n  //     console.error(\"Login error:\", error);\n  //     alert(error.response?.data?.detail || \"Invalid email or password.\");\n  //   }\n  // };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Use the API function instead of direct API call\n      const response = await loginJobSeeker(formData.email, formData.password);\n\n      // Extract user details\n      const userData = {\n        email: formData.email,\n        role: response.role,\n        user_id: response.user_id,\n        token: response.access_token\n      };\n      if (userData.role !== \"job_seeker\") {\n        alert(\"You are trying to log in as a job seeker with an employer account.\");\n        return;\n      }\n\n      // Store user data in AuthContext and localStorage\n      login(userData);\n\n      // Debugging check\n      console.log(\"Login successful:\", userData);\n      alert(\"Login successful!\");\n      navigate(\"/jobs\");\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Login error:\", error);\n      alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || \"Invalid email or password.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Job Seeker Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"Email\",\n        value: formData.email,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Password\",\n        value: formData.password,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/signup\",\n        children: \"Sign up here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(JobSeekerLogin, \"7b79Cc4VZCpZNDfIjxtO767fDdU=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = JobSeekerLogin;\nexport default JobSeekerLogin;\nvar _c;\n$RefreshReg$(_c, \"JobSeekerLogin\");","map":{"version":3,"names":["React","useState","api","useNavigate","useAuth","jsxDEV","_jsxDEV","JobSeekerLogin","_s","login","navigate","formData","setFormData","email","password","handleChange","e","name","value","target","handleSubmit","preventDefault","response","loginJobSeeker","userData","role","user_id","token","access_token","alert","console","log","error","_error$response","_error$response$data","data","detail","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","required","href","_c","$RefreshReg$"],"sources":["C:/final_year_project/app/frontend/src/pages/JobSeekerLogin.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { api } from \"../services/api\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../styles/JobSeekerLogin.css\";\r\nimport { useAuth } from \"../context/AuthContext\"; \r\n\r\nconst JobSeekerLogin = () => {\r\n  const { login } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  // const handleSubmit = async (e) => {\r\n  //   e.preventDefault();\r\n  //   try {\r\n  //     const response = await api.post(\"/auth/login\", new URLSearchParams({\r\n  //       username: formData.email,\r\n  //       password: formData.password,\r\n  //     }),\r\n  //     {\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n  //       }\r\n  //     }\r\n\r\n  //   );\r\n  //     const userData = {\r\n  //       email: formData.email,\r\n  //       role: response.data.role,\r\n  //       user_id: response.data.user_id,\r\n  //       token: response.data.access_token\r\n  //     };\r\n\r\n  //     if (userData.role !== \"job_seeker\") {\r\n  //       alert(\"You are trying to log in as a job seeker with an employer account.\");\r\n  //       return;\r\n  //     }\r\n\r\n  //     login(userData);\r\n\r\n  //     alert(\"Login successful!\");\r\n  //     navigate(\"/jobs\");\r\n  //   } catch (error) {\r\n  //     console.error(\"Login error:\", error);\r\n  //     alert(error.response?.data?.detail || \"Invalid email or password.\");\r\n  //   }\r\n  // };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n        // Use the API function instead of direct API call\r\n        const response = await loginJobSeeker(formData.email, formData.password);\r\n\r\n        // Extract user details\r\n        const userData = {\r\n            email: formData.email,\r\n            role: response.role,\r\n            user_id: response.user_id,\r\n            token: response.access_token\r\n        };\r\n\r\n        if (userData.role !== \"job_seeker\") {\r\n            alert(\"You are trying to log in as a job seeker with an employer account.\");\r\n            return;\r\n        }\r\n\r\n        // Store user data in AuthContext and localStorage\r\n        login(userData);\r\n\r\n        // Debugging check\r\n        console.log(\"Login successful:\", userData);\r\n        alert(\"Login successful!\");\r\n\r\n        navigate(\"/jobs\");\r\n    } catch (error) {\r\n        console.error(\"Login error:\", error);\r\n        alert(error.response?.data?.detail || \"Invalid email or password.\");\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <h2>Job Seeker Login</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          placeholder=\"Email\"\r\n          value={formData.email}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          value={formData.password}\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <button type=\"submit\">Login</button>\r\n      </form>\r\n      <p>Don't have an account? <a href=\"/signup\">Sign up here</a></p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobSeekerLogin;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,GAAG,QAAQ,iBAAiB;AACrC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,8BAA8B;AACrC,SAASC,OAAO,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC;EAAM,CAAC,GAAGL,OAAO,CAAC,CAAC;EAC3B,MAAMM,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC;IACvCY,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCP,WAAW,CAAC;MAAE,GAAGD,QAAQ;MAAE,CAACM,IAAI,GAAGC;IAAM,CAAC,CAAC;EAC7C,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAME,YAAY,GAAG,MAAOJ,CAAC,IAAK;IAChCA,CAAC,CAACK,cAAc,CAAC,CAAC;IAClB,IAAI;MACA;MACA,MAAMC,QAAQ,GAAG,MAAMC,cAAc,CAACZ,QAAQ,CAACE,KAAK,EAAEF,QAAQ,CAACG,QAAQ,CAAC;;MAExE;MACA,MAAMU,QAAQ,GAAG;QACbX,KAAK,EAAEF,QAAQ,CAACE,KAAK;QACrBY,IAAI,EAAEH,QAAQ,CAACG,IAAI;QACnBC,OAAO,EAAEJ,QAAQ,CAACI,OAAO;QACzBC,KAAK,EAAEL,QAAQ,CAACM;MACpB,CAAC;MAED,IAAIJ,QAAQ,CAACC,IAAI,KAAK,YAAY,EAAE;QAChCI,KAAK,CAAC,oEAAoE,CAAC;QAC3E;MACJ;;MAEA;MACApB,KAAK,CAACe,QAAQ,CAAC;;MAEf;MACAM,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEP,QAAQ,CAAC;MAC1CK,KAAK,CAAC,mBAAmB,CAAC;MAE1BnB,QAAQ,CAAC,OAAO,CAAC;IACrB,CAAC,CAAC,OAAOsB,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACZJ,OAAO,CAACE,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCH,KAAK,CAAC,EAAAI,eAAA,GAAAD,KAAK,CAACV,QAAQ,cAAAW,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBE,IAAI,cAAAD,oBAAA,uBAApBA,oBAAA,CAAsBE,MAAM,KAAI,4BAA4B,CAAC;IACvE;EACF,CAAC;EAGD,oBACE9B,OAAA;IAAK+B,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BhC,OAAA;MAAAgC,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBpC,OAAA;MAAMqC,QAAQ,EAAEvB,YAAa;MAAAkB,QAAA,gBAC3BhC,OAAA;QACEsC,IAAI,EAAC,OAAO;QACZ3B,IAAI,EAAC,OAAO;QACZ4B,WAAW,EAAC,OAAO;QACnB3B,KAAK,EAAEP,QAAQ,CAACE,KAAM;QACtBiC,QAAQ,EAAE/B,YAAa;QACvBgC,QAAQ;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACFpC,OAAA;QACEsC,IAAI,EAAC,UAAU;QACf3B,IAAI,EAAC,UAAU;QACf4B,WAAW,EAAC,UAAU;QACtB3B,KAAK,EAAEP,QAAQ,CAACG,QAAS;QACzBgC,QAAQ,EAAE/B,YAAa;QACvBgC,QAAQ;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACFpC,OAAA;QAAQsC,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACPpC,OAAA;MAAAgC,QAAA,GAAG,yBAAuB,eAAAhC,OAAA;QAAG0C,IAAI,EAAC,SAAS;QAAAV,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7D,CAAC;AAEV,CAAC;AAAClC,EAAA,CA5GID,cAAc;EAAA,QACAH,OAAO,EACRD,WAAW;AAAA;AAAA8C,EAAA,GAFxB1C,cAAc;AA8GpB,eAAeA,cAAc;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}