{"ast":null,"code":"var _jsxFileName = \"C:\\\\final_year_project\\\\app\\\\frontend\\\\src\\\\pages\\\\EmployerLogin.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { useAuth } from \"../context/AuthContext\";\n// import { loginEmployer } from \"../services/api\";\n// import \"../styles/EmployerLogin.css\";\n\n// const EmployerLogin = () => {\n//   const { login } = useAuth();\n//   const navigate = useNavigate();\n//   const [formData, setFormData] = useState({\n//     email: \"\",\n//     password: \"\",\n//   });\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await loginEmployer(formData.email, formData.password);\n\n//       const userData = {\n//         email: formData.email,\n//         role: response.role,\n//         user_id: response.user_id,\n//         token: response.access_token\n//       };\n\n//       if (userData.role !== \"recruiter\") {\n//         alert(\"You are trying to log in as an employer with a job seeker account.\");\n//         return;\n//       }\n\n//       login(userData);\n//       // alert(\"Login successful!\");\n//       navigate(\"/my-posted-jobs\");\n//     } catch (error) {\n//       console.error(\"Login error:\", error);\n//       alert(error.response?.data?.detail || \"Invalid email or password.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"login-container\">\n//       <h2>Employer Login</h2>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"email\"\n//           name=\"email\"\n//           placeholder=\"Work Email\"\n//           value={formData.email}\n//           onChange={handleChange}\n//           required\n//         />\n//         <input\n//           type=\"password\"\n//           name=\"password\"\n//           placeholder=\"Password\"\n//           value={formData.password}\n//           onChange={handleChange}\n//           required\n//         />\n//         <button type=\"submit\">Login</button>\n//       </form>\n//       <p>Don't have an account? <a href=\"/employer-signup\">Sign up here</a></p>\n//     </div>\n//   );\n// };\n\n// export default EmployerLogin;\n\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../context/AuthContext\";\nimport { loginEmployer } from \"../services/api\";\nimport \"../styles/EmployerLogin.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmployerLogin = () => {\n  _s();\n  const {\n    login\n  } = useAuth();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    try {\n      // Call the API to log in as an employer\n      const response = await loginEmployer(formData.email, formData.password);\n\n      // Ensure we have a valid response\n      if (!response || !response.access_token) {\n        throw new Error(\"Invalid response from server\");\n      }\n\n      // Check if the user has the correct role\n      if (response.role !== \"recruiter\") {\n        setError(\"You are trying to log in as an employer with a job seeker account.\");\n        setLoading(false);\n        return;\n      }\n\n      // Log the user in (this will handle storing the token and redirecting)\n      await login(response);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error(\"Login error:\", error);\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || \"Invalid email or password.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Employer Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"Work Email\",\n        value: formData.email,\n        onChange: handleChange,\n        required: true,\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Password\",\n        value: formData.password,\n        onChange: handleChange,\n        required: true,\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? \"Logging in...\" : \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/employer-signup\",\n        children: \"Sign up here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(EmployerLogin, \"g4XQuhMvchuoh8JOHSfzdUVOwQU=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = EmployerLogin;\nexport default EmployerLogin;\nvar _c;\n$RefreshReg$(_c, \"EmployerLogin\");","map":{"version":3,"names":["React","useState","useNavigate","useAuth","loginEmployer","jsxDEV","_jsxDEV","EmployerLogin","_s","login","navigate","formData","setFormData","email","password","loading","setLoading","error","setError","handleChange","e","name","value","target","handleSubmit","preventDefault","response","access_token","Error","role","_error$response","_error$response$data","console","data","detail","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","required","disabled","href","_c","$RefreshReg$"],"sources":["C:/final_year_project/app/frontend/src/pages/EmployerLogin.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { useAuth } from \"../context/AuthContext\";\r\n// import { loginEmployer } from \"../services/api\";\r\n// import \"../styles/EmployerLogin.css\";\r\n\r\n// const EmployerLogin = () => {\r\n//   const { login } = useAuth();\r\n//   const navigate = useNavigate();\r\n//   const [formData, setFormData] = useState({\r\n//     email: \"\",\r\n//     password: \"\",\r\n//   });\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const response = await loginEmployer(formData.email, formData.password);\r\n\r\n//       const userData = {\r\n//         email: formData.email,\r\n//         role: response.role,\r\n//         user_id: response.user_id,\r\n//         token: response.access_token\r\n//       };\r\n\r\n//       if (userData.role !== \"recruiter\") {\r\n//         alert(\"You are trying to log in as an employer with a job seeker account.\");\r\n//         return;\r\n//       }\r\n\r\n//       login(userData);\r\n//       // alert(\"Login successful!\");\r\n//       navigate(\"/my-posted-jobs\");\r\n//     } catch (error) {\r\n//       console.error(\"Login error:\", error);\r\n//       alert(error.response?.data?.detail || \"Invalid email or password.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"login-container\">\r\n//       <h2>Employer Login</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input\r\n//           type=\"email\"\r\n//           name=\"email\"\r\n//           placeholder=\"Work Email\"\r\n//           value={formData.email}\r\n//           onChange={handleChange}\r\n//           required\r\n//         />\r\n//         <input\r\n//           type=\"password\"\r\n//           name=\"password\"\r\n//           placeholder=\"Password\"\r\n//           value={formData.password}\r\n//           onChange={handleChange}\r\n//           required\r\n//         />\r\n//         <button type=\"submit\">Login</button>\r\n//       </form>\r\n//       <p>Don't have an account? <a href=\"/employer-signup\">Sign up here</a></p>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EmployerLogin;\r\n\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useAuth } from \"../context/AuthContext\";\r\nimport { loginEmployer } from \"../services/api\";\r\nimport \"../styles/EmployerLogin.css\";\r\n\r\nconst EmployerLogin = () => {\r\n  const { login } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Call the API to log in as an employer\r\n      const response = await loginEmployer(formData.email, formData.password);\r\n      \r\n      // Ensure we have a valid response\r\n      if (!response || !response.access_token) {\r\n        throw new Error(\"Invalid response from server\");\r\n      }\r\n      \r\n      // Check if the user has the correct role\r\n      if (response.role !== \"recruiter\") {\r\n        setError(\"You are trying to log in as an employer with a job seeker account.\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // Log the user in (this will handle storing the token and redirecting)\r\n      await login(response);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      setError(error.response?.data?.detail || \"Invalid email or password.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <h2>Employer Login</h2>\r\n      \r\n      {error && (\r\n        <div className=\"error-message\">\r\n          {error}\r\n        </div>\r\n      )}\r\n      \r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          placeholder=\"Work Email\"\r\n          value={formData.email}\r\n          onChange={handleChange}\r\n          required\r\n          disabled={loading}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          value={formData.password}\r\n          onChange={handleChange}\r\n          required\r\n          disabled={loading}\r\n        />\r\n        <button type=\"submit\" disabled={loading}>\r\n          {loading ? \"Logging in...\" : \"Login\"}\r\n        </button>\r\n      </form>\r\n      <p>Don't have an account? <a href=\"/employer-signup\">Sign up here</a></p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployerLogin;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}