{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://127.0.0.1:8000/api\";\nexport const api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Example: Fetch jobs\nexport const fetchJobs = async () => {\n  try {\n    const response = await api.get(\"/jobs/\");\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching jobs:\", error);\n    throw error;\n  }\n};\n\n// Example: Get recommendations\nexport const fetchRecommendations = async userId => {\n  try {\n    const response = await api.get(`/recommendations/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recommendations:\", error);\n    throw error;\n  }\n};\nexport const fetchRecommendationsWithForm = async formData => {\n  try {\n    const response = await api.post(\"/recommendations/\", formData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recommendations:\", error);\n    throw error;\n  }\n};\nexport const fetchAppliedJobs = async seekerId => {\n  try {\n    const response = await api.get(`/applied-jobs/${seekerId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching applied jobs:\", error);\n    throw error;\n  }\n};\n\n// export const loginJobSeeker = async (email, password) => {\n//   try {\n//     // const response = await axios.post(\"/auth/login\", new URLSearchParams({ \n//     const response = await api.post(\"/auth/login\", new URLSearchParams({ \n//       username: email, password, scope: \"job_seeker\" }),\n//       { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\n//     );\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Login error:\", error.response?.data || error.message);\n//     throw error;\n//   }\n// };\n\n// export const loginEmployer = async (email, password) => {\n//   try {\n//     const response = await axios.post(\"/auth/login\", new URLSearchParams({\n//       username: email, password, scope: \"recruiter\" }),\n//       { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\n//     );\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Login error:\", error.response?.data || error.message);\n//     throw error;\n//   }\n// };\n\nexport const loginJobSeeker = async credentials => {\n  const response = await fetch(`${API_BASE_URL}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(credentials)\n  });\n  if (!response.ok) {\n    throw new Error(\"Invalid credentials\");\n  }\n  return response.json();\n};\nexport const loginEmployer = async credentials => {\n  const response = await fetch(`${API_BASE_URL}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(credentials)\n  });\n  if (!response.ok) {\n    throw new Error(\"Invalid credentials\");\n  }\n  return response.json();\n};\n\n/////////////\n\n// ✅ Fetch Job Seeker Profile\nexport const fetchJobSeekerProfile = async userId => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    console.error(\"fetchJobSeekerProfile: No auth token found!\");\n    throw new Error(\"Unauthorized: No token available.\");\n  }\n  try {\n    const response = await api.get(`/seekers/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"Error fetching job seeker profile:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\nexport const createJobSeekerProfile = async (userId, profileData) => {\n  const token = localStorage.getItem(\"token\");\n  const response = await axios.post(`/seekers/${userId}`, profileData, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response.data;\n};\nexport const updateJobSeekerProfile = async (userId, profileData) => {\n  const token = localStorage.getItem(\"token\");\n  const response = await api.put(`/seekers/${userId}`, profileData, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response.data;\n};\n\n// ✅ Fetch Recruiter Profile\nexport const fetchRecruiterProfile = async userId => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) throw new Error(\"Unauthorized: No token available.\");\n  try {\n    const response = await api.get(`/recruiters/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error(\"Error fetching recruiter profile:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw error;\n  }\n};\nexport const createRecruiterProfile = async (userId, profileData) => {\n  const token = localStorage.getItem(\"token\");\n  const response = await axios.post(`/recruiters/${userId}`, profileData, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response.data;\n};\nexport const updateRecruiterProfile = async (userId, profileData) => {\n  const token = localStorage.getItem(\"token\");\n  const response = await api.put(`/recruiters/${userId}`, profileData, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response.data;\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","headers","fetchJobs","response","get","data","error","console","fetchRecommendations","userId","fetchRecommendationsWithForm","formData","post","fetchAppliedJobs","seekerId","loginJobSeeker","credentials","fetch","method","body","JSON","stringify","ok","Error","json","loginEmployer","fetchJobSeekerProfile","token","localStorage","getItem","Authorization","_error$response","message","createJobSeekerProfile","profileData","updateJobSeekerProfile","put","fetchRecruiterProfile","_error$response2","createRecruiterProfile","updateRecruiterProfile"],"sources":["C:/final_year_project/app/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://127.0.0.1:8000/api\";\r\n\r\nexport const api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Example: Fetch jobs\r\nexport const fetchJobs = async () => {\r\n  try {\r\n    const response = await api.get(\"/jobs/\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching jobs:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Example: Get recommendations\r\nexport const fetchRecommendations = async (userId) => {\r\n  try {\r\n    const response = await api.get(`/recommendations/${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching recommendations:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchRecommendationsWithForm = async (formData) => {\r\n  try {\r\n    const response = await api.post(\"/recommendations/\", formData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching recommendations:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchAppliedJobs = async (seekerId) => {\r\n  try {\r\n    const response = await api.get(`/applied-jobs/${seekerId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching applied jobs:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// export const loginJobSeeker = async (email, password) => {\r\n//   try {\r\n//     // const response = await axios.post(\"/auth/login\", new URLSearchParams({ \r\n//     const response = await api.post(\"/auth/login\", new URLSearchParams({ \r\n//       username: email, password, scope: \"job_seeker\" }),\r\n//       { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n//     );\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Login error:\", error.response?.data || error.message);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n\r\n// export const loginEmployer = async (email, password) => {\r\n//   try {\r\n//     const response = await axios.post(\"/auth/login\", new URLSearchParams({\r\n//       username: email, password, scope: \"recruiter\" }),\r\n//       { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n//     );\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Login error:\", error.response?.data || error.message);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n\r\nexport const loginJobSeeker = async (credentials) => {\r\n  const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(credentials),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Invalid credentials\");\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\nexport const loginEmployer = async (credentials) => {\r\n  const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(credentials),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Invalid credentials\");\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n\r\n/////////////\r\n\r\n// ✅ Fetch Job Seeker Profile\r\nexport const fetchJobSeekerProfile = async (userId) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n      console.error(\"fetchJobSeekerProfile: No auth token found!\");\r\n      throw new Error(\"Unauthorized: No token available.\");\r\n  }\r\n\r\n  try {\r\n      const response = await api.get(`/seekers/${userId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error fetching job seeker profile:\", error.response?.data || error.message);\r\n      throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const createJobSeekerProfile = async (userId, profileData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const response = await axios.post(`/seekers/${userId}`, profileData, {\r\n      headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/json\" },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const updateJobSeekerProfile = async (userId, profileData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const response = await api.put(`/seekers/${userId}`, profileData, {\r\n      headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/json\" },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// ✅ Fetch Recruiter Profile\r\nexport const fetchRecruiterProfile = async (userId) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) throw new Error(\"Unauthorized: No token available.\");\r\n\r\n  try {\r\n      const response = await api.get(`/recruiters/${userId}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error fetching recruiter profile:\", error.response?.data || error.message);\r\n      throw error;\r\n  }\r\n};\r\n\r\nexport const createRecruiterProfile = async (userId, profileData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const response = await axios.post(`/recruiters/${userId}`, profileData, {\r\n      headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/json\" },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const updateRecruiterProfile = async (userId, profileData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const response = await api.put(`/recruiters/${userId}`, profileData, {\r\n      headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/json\" },\r\n  });\r\n  return response.data;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}