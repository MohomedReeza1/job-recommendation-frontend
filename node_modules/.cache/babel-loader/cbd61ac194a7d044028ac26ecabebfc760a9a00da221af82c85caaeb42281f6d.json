{"ast":null,"code":"var _jsxFileName = \"C:\\\\final_year_project\\\\app\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { fetchJobSeekerProfile, fetchRecruiterProfile } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Load user data from localStorage on initial load\n  useEffect(() => {\n    const loadUser = async () => {\n      setLoading(true);\n      try {\n        const token = localStorage.getItem(\"token\");\n        const role = localStorage.getItem(\"role\");\n        const user_id = localStorage.getItem(\"user_id\");\n        const specific_id = localStorage.getItem(\"specific_id\");\n\n        // console.log(\"Loading user from storage:\", { token, role, user_id, specific_id });\n\n        if (token && role && user_id) {\n          // Even if specific_id is missing, we still want to set the user\n          const userData = {\n            token,\n            role,\n            user_id,\n            specific_id: specific_id || null\n          };\n          setUser(userData);\n\n          // Attempt to load profile even if specific_id is missing\n          // The API functions should handle this gracefully\n          try {\n            if (role === \"job_seeker\") {\n              const profileData = await fetchJobSeekerProfile();\n              if (profileData) {\n                setUserProfile(profileData);\n              }\n            } else if (role === \"recruiter\") {\n              const profileData = await fetchRecruiterProfile();\n              if (profileData) {\n                setUserProfile(profileData);\n              }\n            }\n          } catch (error) {\n            console.error(\"Error loading profile on app start:\", error);\n            // Don't throw error, just continue with null profile\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading user:\", error);\n        // Clear potentially corrupted auth data\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"role\");\n        localStorage.removeItem(\"user_id\");\n        localStorage.removeItem(\"specific_id\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, []);\n  const login = async userData => {\n    try {\n      if (!userData || !userData.token) {\n        throw new Error(\"Invalid login data received\");\n      }\n      console.log(\"Login data received:\", userData);\n\n      // IMPORTANT: Check if specific_id is a valid number\n      const validSpecificId = userData.specific_id !== undefined && userData.specific_id !== null && !isNaN(userData.specific_id) && userData.specific_id !== \"pending\";\n\n      // If we have a valid specific_id, use it; otherwise use \"pending\"\n      const specificIdToStore = validSpecificId ? String(userData.specific_id) : \"pending\";\n\n      // Save all user data to localStorage, handling any missing values\n      localStorage.setItem(\"token\", userData.token);\n      localStorage.setItem(\"role\", userData.role);\n      localStorage.setItem(\"user_id\", userData.user_id);\n      localStorage.setItem(\"specific_id\", specificIdToStore);\n\n      // Log what we're actually storing\n      console.log(\"Storing in localStorage:\", {\n        role: userData.role,\n        user_id: userData.user_id,\n        specific_id: specificIdToStore\n      });\n\n      // Create a user object with the clean values\n      const userObject = {\n        ...userData,\n        specific_id: specificIdToStore\n      };\n      setUser(userObject);\n\n      // Only try to create a profile if we don't have a valid specific_id\n      if (userData.role === \"recruiter\" && !validSpecificId) {\n        try {\n          console.log(\"Attempting to create/fetch recruiter profile after login\");\n          const profileData = await fetchRecruiterProfile();\n\n          // If we got a valid profile with an ID, update the user data\n          if (profileData && profileData.agency_id) {\n            const updatedSpecificId = String(profileData.agency_id);\n\n            // Update localStorage and user state\n            localStorage.setItem(\"specific_id\", updatedSpecificId);\n\n            // Update user object\n            setUser(prev => ({\n              ...prev,\n              specific_id: updatedSpecificId\n            }));\n            console.log(\"Updated specific_id after profile fetch:\", updatedSpecificId);\n          }\n        } catch (profileError) {\n          console.error(\"Error loading/creating profile after login:\", profileError);\n          // Continue without profile data\n        }\n      }\n\n      // Redirect after login based on role\n      if (userData.role === \"job_seeker\") {\n        navigate(\"/jobs\");\n      } else if (userData.role === \"recruiter\") {\n        navigate(\"/my-posted-jobs\");\n      }\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      alert(\"Login failed. Please try again.\");\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"role\");\n    localStorage.removeItem(\"user_id\");\n    localStorage.removeItem(\"specific_id\");\n    setUser(null);\n    setUserProfile(null);\n    navigate(\"/login\");\n  };\n  const updateProfile = newProfileData => {\n    setUserProfile(newProfileData);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      userProfile,\n      login,\n      logout,\n      updateProfile,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"DO/VNXK7kZ3M5d1rBq0tV3nwlKM=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useNavigate","fetchJobSeekerProfile","fetchRecruiterProfile","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","userProfile","setUserProfile","loading","setLoading","navigate","loadUser","token","localStorage","getItem","role","user_id","specific_id","userData","profileData","error","console","removeItem","login","Error","log","validSpecificId","undefined","isNaN","specificIdToStore","String","setItem","userObject","agency_id","updatedSpecificId","prev","profileError","alert","logout","updateProfile","newProfileData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/final_year_project/app/frontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { fetchJobSeekerProfile, fetchRecruiterProfile } from \"../services/api\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [userProfile, setUserProfile] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const navigate = useNavigate();\r\n\r\n    // Load user data from localStorage on initial load\r\n    useEffect(() => {\r\n        const loadUser = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const token = localStorage.getItem(\"token\");\r\n                const role = localStorage.getItem(\"role\");\r\n                const user_id = localStorage.getItem(\"user_id\");\r\n                const specific_id = localStorage.getItem(\"specific_id\");\r\n\r\n                // console.log(\"Loading user from storage:\", { token, role, user_id, specific_id });\r\n\r\n                if (token && role && user_id) {\r\n                    // Even if specific_id is missing, we still want to set the user\r\n                    const userData = { \r\n                        token, \r\n                        role, \r\n                        user_id, \r\n                        specific_id: specific_id || null \r\n                    };\r\n                    setUser(userData);\r\n                    \r\n                    // Attempt to load profile even if specific_id is missing\r\n                    // The API functions should handle this gracefully\r\n                    try {\r\n                        if (role === \"job_seeker\") {\r\n                            const profileData = await fetchJobSeekerProfile();\r\n                            if (profileData) {\r\n                                setUserProfile(profileData);\r\n                            }\r\n                        } else if (role === \"recruiter\") {\r\n                            const profileData = await fetchRecruiterProfile();\r\n                            if (profileData) {\r\n                                setUserProfile(profileData);\r\n                            }\r\n                        }\r\n                    } catch (error) {\r\n                        console.error(\"Error loading profile on app start:\", error);\r\n                        // Don't throw error, just continue with null profile\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error loading user:\", error);\r\n                // Clear potentially corrupted auth data\r\n                localStorage.removeItem(\"token\");\r\n                localStorage.removeItem(\"role\");\r\n                localStorage.removeItem(\"user_id\");\r\n                localStorage.removeItem(\"specific_id\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        loadUser();\r\n    }, []);\r\n    \r\n\r\n    const login = async (userData) => {\r\n        try {\r\n            if (!userData || !userData.token) {\r\n                throw new Error(\"Invalid login data received\");\r\n            }\r\n\r\n            console.log(\"Login data received:\", userData);\r\n\r\n            // IMPORTANT: Check if specific_id is a valid number\r\n            const validSpecificId = userData.specific_id !== undefined && \r\n                                userData.specific_id !== null && \r\n                                !isNaN(userData.specific_id) &&\r\n                                userData.specific_id !== \"pending\";\r\n\r\n            // If we have a valid specific_id, use it; otherwise use \"pending\"\r\n            const specificIdToStore = validSpecificId ? String(userData.specific_id) : \"pending\";\r\n            \r\n            // Save all user data to localStorage, handling any missing values\r\n            localStorage.setItem(\"token\", userData.token);\r\n            localStorage.setItem(\"role\", userData.role);\r\n            localStorage.setItem(\"user_id\", userData.user_id);\r\n            localStorage.setItem(\"specific_id\", specificIdToStore);\r\n            \r\n            // Log what we're actually storing\r\n            console.log(\"Storing in localStorage:\", {\r\n                role: userData.role,\r\n                user_id: userData.user_id,\r\n                specific_id: specificIdToStore\r\n            });\r\n\r\n            // Create a user object with the clean values\r\n            const userObject = {\r\n                ...userData,\r\n                specific_id: specificIdToStore\r\n            };\r\n            \r\n            setUser(userObject);\r\n\r\n            // Only try to create a profile if we don't have a valid specific_id\r\n            if (userData.role === \"recruiter\" && !validSpecificId) {\r\n                try {\r\n                    console.log(\"Attempting to create/fetch recruiter profile after login\");\r\n                    const profileData = await fetchRecruiterProfile();\r\n                    \r\n                    // If we got a valid profile with an ID, update the user data\r\n                    if (profileData && profileData.agency_id) {\r\n                        const updatedSpecificId = String(profileData.agency_id);\r\n                        \r\n                        // Update localStorage and user state\r\n                        localStorage.setItem(\"specific_id\", updatedSpecificId);\r\n                        \r\n                        // Update user object\r\n                        setUser(prev => ({...prev, specific_id: updatedSpecificId}));\r\n                        \r\n                        console.log(\"Updated specific_id after profile fetch:\", updatedSpecificId);\r\n                    }\r\n                } catch (profileError) {\r\n                    console.error(\"Error loading/creating profile after login:\", profileError);\r\n                    // Continue without profile data\r\n                }\r\n            }\r\n\r\n            // Redirect after login based on role\r\n            if (userData.role === \"job_seeker\") {\r\n                navigate(\"/jobs\");\r\n            } else if (userData.role === \"recruiter\") {\r\n                navigate(\"/my-posted-jobs\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Login failed:\", error);\r\n            alert(\"Login failed. Please try again.\");\r\n        }\r\n    };\r\n  \r\n    const logout = () => {\r\n        localStorage.removeItem(\"token\");\r\n        localStorage.removeItem(\"role\");\r\n        localStorage.removeItem(\"user_id\");\r\n        localStorage.removeItem(\"specific_id\");\r\n        setUser(null);\r\n        setUserProfile(null);\r\n        navigate(\"/login\");\r\n    };\r\n\r\n    const updateProfile = (newProfileData) => {\r\n        setUserProfile(newProfileData);\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ \r\n            user, \r\n            userProfile, \r\n            login, \r\n            logout, \r\n            updateProfile, \r\n            loading \r\n        }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}