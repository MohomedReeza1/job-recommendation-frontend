{"ast":null,"code":"var _jsxFileName = \"C:\\\\final_year_project\\\\app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport AppRoutes from \"./config/AppRoutes\";\nimport Footer from \"./components/Footer\";\nimport LocalStorageDebugger from \"./components/LocalStorageDebugger\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Add this to a component that loads early (like App.js)\n  // to verify your environment configuration\n\n  useEffect(() => {\n    // Print environment variables (only in development)\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Environment Configuration:');\n      console.log('API Base URL:', process.env.REACT_APP_API_BASE_URL);\n      console.log('Environment:', process.env.NODE_ENV);\n    }\n\n    // Test API connectivity\n    const testAPIConnection = async () => {\n      try {\n        // Make a simple request to verify CORS is working\n        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000/api'}/jobs/?limit=1`);\n        console.log('API Connection Test:', response.status, response.statusText);\n        if (response.ok) {\n          console.log('API connection successful!');\n        } else {\n          console.warn('API returned error status:', response.status);\n        }\n      } catch (error) {\n        console.error('API Connection Test Failed:', error.message);\n      }\n    };\n    testAPIConnection();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppRoutes, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), process.env.NODE_ENV !== 'production' && /*#__PURE__*/_jsxDEV(LocalStorageDebugger, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 49\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","Navbar","AppRoutes","Footer","LocalStorageDebugger","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","process","env","NODE_ENV","console","log","REACT_APP_API_BASE_URL","testAPIConnection","response","fetch","status","statusText","ok","warn","error","message","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/final_year_project/app/frontend/src/App.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport AppRoutes from \"./config/AppRoutes\";\nimport Footer from \"./components/Footer\";\nimport LocalStorageDebugger from \"./components/LocalStorageDebugger\";\n\nconst App = () => {\n\n  // Add this to a component that loads early (like App.js)\n  // to verify your environment configuration\n\n  useEffect(() => {\n    // Print environment variables (only in development)\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Environment Configuration:');\n      console.log('API Base URL:', process.env.REACT_APP_API_BASE_URL);\n      console.log('Environment:', process.env.NODE_ENV);\n    }\n    \n    // Test API connectivity\n    const testAPIConnection = async () => {\n      try {\n        // Make a simple request to verify CORS is working\n        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000/api'}/jobs/?limit=1`);\n        console.log('API Connection Test:', response.status, response.statusText);\n        \n        if (response.ok) {\n          console.log('API connection successful!');\n        } else {\n          console.warn('API returned error status:', response.status);\n        }\n      } catch (error) {\n        console.error('API Connection Test Failed:', error.message);\n      }\n    };\n    \n    testAPIConnection();\n  }, []);\n\n  return (\n    <>\n      <Navbar />\n      <AppRoutes />\n      <Footer />\n      {process.env.NODE_ENV !== 'production' && <LocalStorageDebugger />}\n    </>\n  );\n\n};\n\n\n\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,oBAAoB,MAAM,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAErE,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhB;EACA;;EAEAV,SAAS,CAAC,MAAM;IACd;IACA,IAAIW,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MAC1CC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzCD,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEJ,OAAO,CAACC,GAAG,CAACI,sBAAsB,CAAC;MAChEF,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEJ,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;IACnD;;IAEA;IACA,MAAMI,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,CAACC,GAAG,CAACI,sBAAsB,IAAI,2BAA2B,gBAAgB,CAAC;QAClHF,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEG,QAAQ,CAACE,MAAM,EAAEF,QAAQ,CAACG,UAAU,CAAC;QAEzE,IAAIH,QAAQ,CAACI,EAAE,EAAE;UACfR,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QAC3C,CAAC,MAAM;UACLD,OAAO,CAACS,IAAI,CAAC,4BAA4B,EAAEL,QAAQ,CAACE,MAAM,CAAC;QAC7D;MACF,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdV,OAAO,CAACU,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACC,OAAO,CAAC;MAC7D;IACF,CAAC;IAEDR,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA,CAAAE,SAAA;IAAAkB,QAAA,gBACEpB,OAAA,CAACL,MAAM;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVxB,OAAA,CAACJ,SAAS;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACbxB,OAAA,CAACH,MAAM;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACTnB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,iBAAIP,OAAA,CAACF,oBAAoB;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAClE,CAAC;AAGP,CAAC;AAACpB,EAAA,CA1CID,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AA+CT,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}