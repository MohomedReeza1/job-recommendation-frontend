{"ast":null,"code":"var _jsxFileName = \"C:\\\\final_year_project\\\\app\\\\frontend\\\\src\\\\pages\\\\AppliedJobsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { api } from \"../services/api\";\nimport { useAuth } from \"../context/AuthContext\";\nimport '../styles/ApplyJobPages.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppliedJobsPage = () => {\n  _s();\n  const auth = useAuth();\n\n  // ✅ Move Hooks to the top level\n  const [appliedJobs, setAppliedJobs] = useState([]);\n  const [loading, setLoading] = useState(true); // ✅ Add loading state\n\n  const {\n    user\n  } = auth || {}; // ✅ Ensure auth is not null\n  const seekerId = user === null || user === void 0 ? void 0 : user.seeker_id;\n  useEffect(() => {\n    const fetchAppliedJobs = async () => {\n      if (!seekerId) {\n        setLoading(false); // Stop loading if no seekerId\n        return;\n      }\n      try {\n        // const response = await api.get(`/applied-jobs/${seekerId}`);\n        const response = await api.get(`/applied-jobs/1`);\n        setAppliedJobs(response.data);\n      } catch (error) {\n        console.error(\"Error fetching applied jobs:\", error);\n      } finally {\n        setLoading(false); // ✅ Ensure loading stops\n      }\n    };\n    fetchAppliedJobs();\n  }, [seekerId]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 23\n  }, this); // ✅ Show loading state while fetching\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"applied-jobs-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Applied Jobs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), appliedJobs.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: appliedJobs.map(job => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: job.job_title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: job.country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Applied on: \", new Date(job.applied_at).toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this)]\n      }, job.job_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No jobs applied yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(AppliedJobsPage, \"/rx+Yosw+/HuQXeWueU7ZNz8pUo=\", false, function () {\n  return [useAuth];\n});\n_c = AppliedJobsPage;\nexport default AppliedJobsPage;\nvar _c;\n$RefreshReg$(_c, \"AppliedJobsPage\");","map":{"version":3,"names":["React","useEffect","useState","api","useAuth","jsxDEV","_jsxDEV","AppliedJobsPage","_s","auth","appliedJobs","setAppliedJobs","loading","setLoading","user","seekerId","seeker_id","fetchAppliedJobs","response","get","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","job","job_title","country","Date","applied_at","toLocaleDateString","job_id","_c","$RefreshReg$"],"sources":["C:/final_year_project/app/frontend/src/pages/AppliedJobsPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { api } from \"../services/api\";\r\nimport { useAuth } from \"../context/AuthContext\";\r\nimport '../styles/ApplyJobPages.css';\r\n\r\nconst AppliedJobsPage = () => {\r\n  const auth = useAuth(); \r\n\r\n  // ✅ Move Hooks to the top level\r\n  const [appliedJobs, setAppliedJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true); // ✅ Add loading state\r\n\r\n  const { user } = auth || {};  // ✅ Ensure auth is not null\r\n  const seekerId = user?.seeker_id; \r\n\r\n  useEffect(() => {\r\n    const fetchAppliedJobs = async () => {\r\n      if (!seekerId) {\r\n        setLoading(false); // Stop loading if no seekerId\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // const response = await api.get(`/applied-jobs/${seekerId}`);\r\n        const response = await api.get(`/applied-jobs/1`);\r\n        setAppliedJobs(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching applied jobs:\", error);\r\n      } finally {\r\n        setLoading(false); // ✅ Ensure loading stops\r\n      }\r\n    };\r\n\r\n    fetchAppliedJobs();\r\n  }, [seekerId]); \r\n\r\n  if (loading) return <p>Loading...</p>; // ✅ Show loading state while fetching\r\n\r\n  return (\r\n    <div className=\"applied-jobs-page\">\r\n      <h2>Applied Jobs</h2>\r\n      {appliedJobs.length > 0 ? (\r\n        <ul>\r\n          {appliedJobs.map((job) => (\r\n            <li key={job.job_id}>\r\n              <h3>{job.job_title}</h3>\r\n              <p>{job.country}</p>\r\n              <p>Applied on: {new Date(job.applied_at).toLocaleDateString()}</p>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No jobs applied yet.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppliedJobsPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}