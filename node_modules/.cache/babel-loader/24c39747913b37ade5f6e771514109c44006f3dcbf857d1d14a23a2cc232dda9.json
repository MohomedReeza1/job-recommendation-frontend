{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://127.0.0.1:8000/api\";\nexport const api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Add request interceptor to automatically include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport const fetchJobs = async () => {\n  try {\n    const response = await api.get(\"/jobs/\");\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching jobs:\", error);\n    throw error;\n  }\n};\nexport const fetchRecommendations = async () => {\n  const specific_id = localStorage.getItem(\"specific_id\");\n  if (!specific_id) {\n    console.error(\"fetchRecommendations: No specific ID found\");\n    throw new Error(\"User profile information missing\");\n  }\n  try {\n    const response = await api.get(`/recommendations/${specific_id}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recommendations:\", error);\n    throw error;\n  }\n};\nexport const fetchRecommendationsWithForm = async formData => {\n  try {\n    const response = await api.post(\"/recommendations/\", formData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recommendations:\", error);\n    throw error;\n  }\n};\nexport const fetchAppliedJobs = async () => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  if (!token) {\n    console.error(\"fetchAppliedJobs: No auth token found\");\n    return [];\n  }\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\n    console.error(\"fetchAppliedJobs: No specific ID found\");\n    return [];\n  }\n  try {\n    const response = await api.get(`/applied-jobs/${specific_id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching applied jobs:\", error);\n    return [];\n  }\n};\nexport const loginJobSeeker = async (email, password) => {\n  try {\n    const response = await api.post(\"/auth/login\", new URLSearchParams({\n      username: email,\n      password,\n      scope: \"job_seeker\"\n    }), {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    });\n    console.log(\"Login response:\", response.data);\n\n    // Ensure specific_id is present\n    if (response.data.specific_id === undefined || response.data.specific_id === null) {\n      console.warn(\"No specific_id in login API response, setting a placeholder value\");\n      response.data.specific_id = \"pending\";\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"Login error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\nexport const loginEmployer = async (email, password) => {\n  try {\n    // First, make the login request\n    const response = await api.post(\"/auth/login\", new URLSearchParams({\n      username: email,\n      password,\n      scope: \"recruiter\"\n    }), {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    });\n\n    // Debug the raw response\n    console.log(\"Raw login response data:\", JSON.stringify(response.data));\n\n    // Extract the specific_id from the response and ensure it's properly typed\n    const specificId = response.data.specific_id !== undefined ? response.data.specific_id : null;\n\n    // Create a clean response object with properly typed values\n    const cleanResponse = {\n      access_token: response.data.access_token,\n      token_type: response.data.token_type,\n      role: response.data.role,\n      user_id: Number(response.data.user_id),\n      specific_id: specificId !== null ? Number(specificId) : null,\n      email: email // Add email for reference\n    };\n    console.log(\"Found existing agency profile with ID:\", cleanResponse.specific_id);\n    console.log(\"Login response data:\", cleanResponse);\n    return cleanResponse;\n  } catch (error) {\n    var _error$response2;\n    console.error(\"Login error:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw error;\n  }\n};\n\n// ✅ Fetch Job Seeker Profile\nexport const fetchJobSeekerProfile = async () => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  const user_id = localStorage.getItem(\"user_id\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\n    console.error(\"Missing specific_id for job seeker profile fetch\");\n\n    // Attempt to get specific_id by requesting a new empty profile creation\n    try {\n      // Try to create a profile using the user_id\n      if (user_id) {\n        const response = await api.post(\"/seekers/\", {\n          user_id: parseInt(user_id)\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // Get the specific_id from the response and store it\n        if (response.data && response.data.seeker_id) {\n          localStorage.setItem(\"specific_id\", String(response.data.seeker_id));\n          console.log(\"Created new profile and got specific_id:\", response.data.seeker_id);\n\n          // Return the newly created profile\n          return response.data;\n        }\n      }\n    } catch (profileError) {\n      console.error(\"Failed to create profile:\", profileError);\n    }\n\n    // Return a default empty profile\n    return {\n      name: \"\",\n      age: null,\n      gender: \"\",\n      height: null,\n      weight: null,\n      marital_status: \"\",\n      num_of_children: null,\n      education: \"\",\n      skills: \"\",\n      interests: \"\",\n      previous_jobs: \"\",\n      looking_jobs: \"\",\n      description: \"\",\n      passport_status: \"\"\n    };\n  }\n  try {\n    const response = await api.get(`/seekers/${specific_id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching profile:\", error);\n    // Return empty profile on error\n    return {\n      name: \"\",\n      age: null,\n      gender: \"\",\n      height: null,\n      weight: null,\n      marital_status: \"\",\n      num_of_children: null,\n      education: \"\",\n      skills: \"\",\n      interests: \"\",\n      previous_jobs: \"\",\n      looking_jobs: \"\",\n      description: \"\",\n      passport_status: \"\"\n    };\n  }\n};\nexport const createJobSeekerProfile = async profileData => {\n  const token = localStorage.getItem(\"token\");\n  const user_id = localStorage.getItem(\"user_id\");\n  if (!token || !user_id) {\n    throw new Error(\"Authentication required\");\n  }\n\n  // Add user_id to the profile data\n  const completeProfileData = {\n    ...profileData,\n    user_id: parseInt(user_id)\n  };\n  try {\n    const response = await api.post(\"/seekers/\", completeProfileData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error creating profile:\", error);\n    throw error;\n  }\n};\nexport const updateJobSeekerProfile = async profileData => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  if (!token || !specific_id) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.put(`/seekers/${specific_id}`, profileData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updating profile:\", error);\n    throw error;\n  }\n};\n\n// Function to handle applying for a job\nexport const applyForJob = async (jobId, cvFile, coverLetterFile) => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n\n  // Create form data\n  const formData = new FormData();\n  formData.append(\"job_id\", jobId);\n  formData.append(\"cv\", cvFile);\n  if (coverLetterFile) {\n    formData.append(\"cover_letter\", coverLetterFile);\n  }\n  try {\n    const response = await axios.post(`${API_BASE_URL}/apply-job/`, formData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error applying for job:\", error);\n    throw error;\n  }\n};\n\n//////////////////////////////////////////////\n\n// ✨ NEW: Fetch recruiter (agency) profile\nexport const fetchRecruiterProfile = async () => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.get(\"/recruiters/profile/me\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recruiter profile:\", error);\n    throw error;\n  }\n};\n\n// ✨ NEW: Fetch agency ID for the current user\nexport const fetchAgencyIdForUser = async () => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.get(\"/recruiters/agency-id\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data.agency_id;\n  } catch (error) {\n    console.error(\"Error fetching agency ID:\", error);\n    return null;\n  }\n};\n\n// ✨ NEW: Fetch jobs posted by the current recruiter\nexport const fetchMyPostedJobs = async () => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.get(\"/recruiters/my-posted-jobs\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching posted jobs:\", error);\n    throw error;\n  }\n};\nexport const postJob = async jobData => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    // We don't need to set the recruiter_id/agency_id here\n    // The backend will handle setting the correct agency_id based on the authenticated user\n\n    const response = await api.post(\"/post-job/\", jobData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    console.error(\"Error posting job:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw error;\n  }\n};\nexport const deleteJob = async jobId => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.delete(`/jobs/${jobId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    console.error(\"Error deleting job:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    throw error;\n  }\n};\nexport const fetchJobDetails = async jobId => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await api.get(`/jobs/${jobId}`, {\n      headers: token ? {\n        Authorization: `Bearer ${token}`\n      } : {}\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    console.error(\"Error fetching job details:\", ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw error;\n  }\n};\nexport const fetchJobApplicants = async jobId => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.get(`/job-applicants/${jobId}/`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response6;\n    console.error(\"Error fetching job applicants:\", ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message);\n    throw error;\n  }\n};\nexport const updateJob = async (jobId, jobData) => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.put(`/jobs/${jobId}`, jobData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response7;\n    console.error(\"Error updating job:\", ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","fetchJobs","response","get","data","console","fetchRecommendations","specific_id","Error","fetchRecommendationsWithForm","formData","post","fetchAppliedJobs","loginJobSeeker","email","password","URLSearchParams","username","scope","log","undefined","warn","_error$response","message","loginEmployer","JSON","stringify","specificId","cleanResponse","access_token","token_type","role","user_id","Number","_error$response2","fetchJobSeekerProfile","parseInt","seeker_id","setItem","String","profileError","name","age","gender","height","weight","marital_status","num_of_children","education","skills","interests","previous_jobs","looking_jobs","description","passport_status","createJobSeekerProfile","profileData","completeProfileData","updateJobSeekerProfile","put","applyForJob","jobId","cvFile","coverLetterFile","FormData","append","fetchRecruiterProfile","fetchAgencyIdForUser","agency_id","fetchMyPostedJobs","postJob","jobData","_error$response3","deleteJob","delete","_error$response4","fetchJobDetails","_error$response5","fetchJobApplicants","_error$response6","updateJob","_error$response7"],"sources":["C:/final_year_project/app/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://127.0.0.1:8000/api\";\r\n\r\nexport const api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Add request interceptor to automatically include auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const fetchJobs = async () => {\r\n  try {\r\n    const response = await api.get(\"/jobs/\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching jobs:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchRecommendations = async () => {\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n  if (!specific_id) {\r\n    console.error(\"fetchRecommendations: No specific ID found\");\r\n    throw new Error(\"User profile information missing\");\r\n  }\r\n  \r\n  try {\r\n    const response = await api.get(`/recommendations/${specific_id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching recommendations:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchRecommendationsWithForm = async (formData) => {\r\n  try {\r\n    const response = await api.post(\"/recommendations/\", formData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching recommendations:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchAppliedJobs = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n  if (!token) {\r\n      console.error(\"fetchAppliedJobs: No auth token found\");\r\n      return [];\r\n  }\r\n  \r\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\r\n      console.error(\"fetchAppliedJobs: No specific ID found\");\r\n      return [];\r\n  }\r\n  \r\n  try {\r\n      const response = await api.get(`/applied-jobs/${specific_id}`, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      \r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error fetching applied jobs:\", error);\r\n      return [];\r\n  }\r\n};\r\n\r\nexport const loginJobSeeker = async (email, password) => {\r\n  try {\r\n    const response = await api.post(\"/auth/login\", new URLSearchParams({ \r\n      username: email, \r\n      password, \r\n      scope: \"job_seeker\" \r\n    }),\r\n    { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n    );\r\n    \r\n    console.log(\"Login response:\", response.data);\r\n    \r\n    // Ensure specific_id is present\r\n    if (response.data.specific_id === undefined || response.data.specific_id === null) {\r\n      console.warn(\"No specific_id in login API response, setting a placeholder value\");\r\n      response.data.specific_id = \"pending\";\r\n    }\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const loginEmployer = async (email, password) => {\r\n  try {\r\n    // First, make the login request\r\n    const response = await api.post(\"/auth/login\", new URLSearchParams({\r\n      username: email, \r\n      password, \r\n      scope: \"recruiter\" \r\n    }),\r\n    { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n    );\r\n    \r\n    // Debug the raw response\r\n    console.log(\"Raw login response data:\", JSON.stringify(response.data));\r\n    \r\n    // Extract the specific_id from the response and ensure it's properly typed\r\n    const specificId = response.data.specific_id !== undefined ? response.data.specific_id : null;\r\n    \r\n    // Create a clean response object with properly typed values\r\n    const cleanResponse = {\r\n      access_token: response.data.access_token,\r\n      token_type: response.data.token_type,\r\n      role: response.data.role,\r\n      user_id: Number(response.data.user_id),\r\n      specific_id: specificId !== null ? Number(specificId) : null,\r\n      email: email // Add email for reference\r\n    };\r\n    \r\n    console.log(\"Found existing agency profile with ID:\", cleanResponse.specific_id);\r\n    console.log(\"Login response data:\", cleanResponse);\r\n    \r\n    return cleanResponse;\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ✅ Fetch Job Seeker Profile\r\nexport const fetchJobSeekerProfile = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  const user_id = localStorage.getItem(\"user_id\");\r\n  \r\n  if (!token) {\r\n      throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\r\n      console.error(\"Missing specific_id for job seeker profile fetch\");\r\n      \r\n      // Attempt to get specific_id by requesting a new empty profile creation\r\n      try {\r\n          // Try to create a profile using the user_id\r\n          if (user_id) {\r\n              const response = await api.post(\"/seekers/\", \r\n                  { user_id: parseInt(user_id) },\r\n                  { headers: { Authorization: `Bearer ${token}` }}\r\n              );\r\n              \r\n              // Get the specific_id from the response and store it\r\n              if (response.data && response.data.seeker_id) {\r\n                  localStorage.setItem(\"specific_id\", String(response.data.seeker_id));\r\n                  console.log(\"Created new profile and got specific_id:\", response.data.seeker_id);\r\n                  \r\n                  // Return the newly created profile\r\n                  return response.data;\r\n              }\r\n          }\r\n      } catch (profileError) {\r\n          console.error(\"Failed to create profile:\", profileError);\r\n      }\r\n      \r\n      // Return a default empty profile\r\n      return {\r\n          name: \"\",\r\n          age: null,\r\n          gender: \"\",\r\n          height: null,\r\n          weight: null,\r\n          marital_status: \"\",\r\n          num_of_children: null,\r\n          education: \"\",\r\n          skills: \"\",\r\n          interests: \"\",\r\n          previous_jobs: \"\",\r\n          looking_jobs: \"\",\r\n          description: \"\",\r\n          passport_status: \"\"\r\n      };\r\n  }\r\n  \r\n  try {\r\n      const response = await api.get(`/seekers/${specific_id}`, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error fetching profile:\", error);\r\n      // Return empty profile on error\r\n      return {\r\n          name: \"\",\r\n          age: null,\r\n          gender: \"\",\r\n          height: null,\r\n          weight: null,\r\n          marital_status: \"\",\r\n          num_of_children: null,\r\n          education: \"\",\r\n          skills: \"\",\r\n          interests: \"\",\r\n          previous_jobs: \"\",\r\n          looking_jobs: \"\",\r\n          description: \"\",\r\n          passport_status: \"\"\r\n      };\r\n  }\r\n};\r\n\r\nexport const createJobSeekerProfile = async (profileData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const user_id = localStorage.getItem(\"user_id\");\r\n  \r\n  if (!token || !user_id) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  // Add user_id to the profile data\r\n  const completeProfileData = {\r\n    ...profileData,\r\n    user_id: parseInt(user_id)\r\n  };\r\n  \r\n  try {\r\n    const response = await api.post(\"/seekers/\", completeProfileData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error creating profile:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateJobSeekerProfile = async (profileData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n  if (!token || !specific_id) {\r\n      throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n      const response = await api.put(`/seekers/${specific_id}`, profileData, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error updating profile:\", error);\r\n      throw error;\r\n  }\r\n};\r\n\r\n// Function to handle applying for a job\r\nexport const applyForJob = async (jobId, cvFile, coverLetterFile) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  \r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  // Create form data\r\n  const formData = new FormData();\r\n  formData.append(\"job_id\", jobId);\r\n  formData.append(\"cv\", cvFile);\r\n  \r\n  if (coverLetterFile) {\r\n    formData.append(\"cover_letter\", coverLetterFile);\r\n  }\r\n  \r\n  try {\r\n    const response = await axios.post(\r\n      `${API_BASE_URL}/apply-job/`,\r\n      formData,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error applying for job:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//////////////////////////////////////////////\r\n\r\n// ✨ NEW: Fetch recruiter (agency) profile\r\nexport const fetchRecruiterProfile = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n    const response = await api.get(\"/recruiters/profile/me\", {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching recruiter profile:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ✨ NEW: Fetch agency ID for the current user\r\nexport const fetchAgencyIdForUser = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n    const response = await api.get(\"/recruiters/agency-id\", {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data.agency_id;\r\n  } catch (error) {\r\n    console.error(\"Error fetching agency ID:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// ✨ NEW: Fetch jobs posted by the current recruiter\r\nexport const fetchMyPostedJobs = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n    const response = await api.get(\"/recruiters/my-posted-jobs\", {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching posted jobs:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const postJob = async (jobData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  \r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n    // We don't need to set the recruiter_id/agency_id here\r\n    // The backend will handle setting the correct agency_id based on the authenticated user\r\n    \r\n    const response = await api.post(\"/post-job/\", jobData, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error posting job:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteJob = async (jobId) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  try {\r\n    const response = await api.delete(`/jobs/${jobId}`, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error deleting job:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchJobDetails = async (jobId) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  try {\r\n    const response = await api.get(`/jobs/${jobId}`, {\r\n      headers: token ? { Authorization: `Bearer ${token}` } : {}\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching job details:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchJobApplicants = async (jobId) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  try {\r\n    const response = await api.get(`/job-applicants/${jobId}/`, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching job applicants:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateJob = async (jobId, jobData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  \r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n    const response = await api.put(`/jobs/${jobId}`, jobData, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error updating job:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}