{"ast":null,"code":"var _jsxFileName = \"C:\\\\final_year_project\\\\app\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { fetchJobSeekerProfile, fetchRecruiterProfile, fetchAgencyIdForUser } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Load user data from localStorage on initial load\n  useEffect(() => {\n    const loadUser = async () => {\n      setLoading(true);\n      try {\n        const token = localStorage.getItem(\"token\");\n        const role = localStorage.getItem(\"role\");\n        const user_id = localStorage.getItem(\"user_id\");\n        const specific_id = localStorage.getItem(\"specific_id\");\n        console.log(\"Loading from localStorage:\", {\n          token: !!token,\n          role,\n          user_id,\n          specific_id\n        });\n        if (token && role && user_id) {\n          const userData = {\n            token,\n            role,\n            user_id,\n            specific_id: specific_id || null\n          };\n          setUser(userData);\n          try {\n            // Load appropriate profile based on role\n            if (role === \"job_seeker\") {\n              const profileData = await fetchJobSeekerProfile();\n              if (profileData) {\n                setUserProfile(profileData);\n              }\n            } else if (role === \"recruiter\") {\n              const profileData = await fetchRecruiterProfile();\n              if (profileData) {\n                setUserProfile(profileData);\n              }\n            }\n          } catch (error) {\n            console.error(\"Error loading profile on app start:\", error);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading user:\", error);\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"role\");\n        localStorage.removeItem(\"user_id\");\n        localStorage.removeItem(\"specific_id\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, []);\n  const login = async userData => {\n    try {\n      // Enhanced validation with detailed logging\n      if (!userData) {\n        console.error(\"userData is completely missing\");\n        throw new Error(\"Invalid login data received: userData is null or undefined\");\n      }\n\n      // Log the input data exactly as received\n      console.log(\"Login data received:\", userData);\n\n      // Verify token existence with better debug info\n      const token = userData.token || userData.access_token;\n      if (!token) {\n        console.error(\"No token found in userData:\", userData);\n        throw new Error(\"Invalid login data received: No token found\");\n      }\n\n      // Extract other essential data\n      const userId = userData.user_id;\n      const role = userData.role;\n\n      // Additional validation\n      if (!userId || !role) {\n        console.error(\"Missing critical data:\", {\n          userId,\n          role\n        });\n        throw new Error(\"Invalid login data: Missing user_id or role\");\n      }\n\n      // Save the basic user data immediately\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"role\", role);\n      localStorage.setItem(\"user_id\", userId);\n\n      // Extract specific_id directly from response if available\n      let specificId = userData.specific_id;\n      console.log(\"Raw specific_id from response:\", specificId, \"Type:\", typeof specificId);\n\n      // If specific_id is missing, fetch it based on role\n      if ((!specificId || specificId === undefined || specificId === null) && role === \"recruiter\") {\n        console.log(\"specific_id is missing in login response, attempting to fetch it\");\n        try {\n          specificId = await fetchAgencyIdForUser();\n          console.log(\"Fetched specific_id for recruiter:\", specificId);\n          if (specificId) {\n            // Update the userData object with the fetched specific_id\n            userData.specific_id = specificId;\n          }\n        } catch (fetchError) {\n          console.error(\"Error fetching specific_id:\", fetchError);\n        }\n      }\n\n      // Now save specific_id to localStorage if we have it\n      if (specificId !== undefined && specificId !== null) {\n        const specificIdString = String(specificId);\n        console.log(\"Saving specific_id to localStorage:\", specificIdString);\n        localStorage.setItem(\"specific_id\", specificIdString);\n      } else {\n        console.warn(\"Could not determine specific_id\");\n        localStorage.setItem(\"specific_id\", \"\");\n      }\n\n      // For debugging - check what was stored\n      console.log(\"Verifying localStorage after saving:\");\n      console.log(\"- token:\", localStorage.getItem(\"token\") ? \"saved\" : \"missing\");\n      console.log(\"- role:\", localStorage.getItem(\"role\"));\n      console.log(\"- user_id:\", localStorage.getItem(\"user_id\"));\n      console.log(\"- specific_id:\", localStorage.getItem(\"specific_id\"));\n\n      // Create user object with consistent properties\n      const userObject = {\n        token: token,\n        role: role,\n        user_id: userId,\n        specific_id: specificId\n      };\n      setUser(userObject);\n\n      // Also load the profile data based on role\n      try {\n        if (role === \"job_seeker\") {\n          const profileData = await fetchJobSeekerProfile();\n          setUserProfile(profileData);\n        } else if (role === \"recruiter\") {\n          const profileData = await fetchRecruiterProfile();\n          setUserProfile(profileData);\n        }\n      } catch (profileError) {\n        console.error(\"Error loading profile after login:\", profileError);\n      }\n\n      // Redirect based on role\n      if (role === \"job_seeker\") {\n        navigate(\"/jobs\");\n      } else if (role === \"recruiter\") {\n        navigate(\"/my-posted-jobs\");\n      }\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      alert(\"Login failed. Please try again: \" + error.message);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"role\");\n    localStorage.removeItem(\"user_id\");\n    localStorage.removeItem(\"specific_id\");\n    setUser(null);\n    setUserProfile(null);\n    navigate(\"/login\");\n  };\n  const updateProfile = newProfileData => {\n    setUserProfile(newProfileData);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      userProfile,\n      login,\n      logout,\n      updateProfile,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"DO/VNXK7kZ3M5d1rBq0tV3nwlKM=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useNavigate","fetchJobSeekerProfile","fetchRecruiterProfile","fetchAgencyIdForUser","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","userProfile","setUserProfile","loading","setLoading","navigate","loadUser","token","localStorage","getItem","role","user_id","specific_id","console","log","userData","profileData","error","removeItem","login","Error","access_token","userId","setItem","specificId","undefined","fetchError","specificIdString","String","warn","userObject","profileError","alert","message","logout","updateProfile","newProfileData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/final_year_project/app/frontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { fetchJobSeekerProfile, fetchRecruiterProfile, fetchAgencyIdForUser } from \"../services/api\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [userProfile, setUserProfile] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const navigate = useNavigate();\r\n\r\n    // Load user data from localStorage on initial load\r\n    useEffect(() => {\r\n        const loadUser = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const token = localStorage.getItem(\"token\");\r\n                const role = localStorage.getItem(\"role\");\r\n                const user_id = localStorage.getItem(\"user_id\");\r\n                const specific_id = localStorage.getItem(\"specific_id\");\r\n\r\n                console.log(\"Loading from localStorage:\", { token: !!token, role, user_id, specific_id });\r\n\r\n                if (token && role && user_id) {\r\n                    const userData = { \r\n                        token, \r\n                        role, \r\n                        user_id, \r\n                        specific_id: specific_id || null \r\n                    };\r\n                    setUser(userData);\r\n                    \r\n                    try {\r\n                        // Load appropriate profile based on role\r\n                        if (role === \"job_seeker\") {\r\n                            const profileData = await fetchJobSeekerProfile();\r\n                            if (profileData) {\r\n                                setUserProfile(profileData);\r\n                            }\r\n                        } else if (role === \"recruiter\") {\r\n                            const profileData = await fetchRecruiterProfile();\r\n                            if (profileData) {\r\n                                setUserProfile(profileData);\r\n                            }\r\n                        }\r\n                    } catch (error) {\r\n                        console.error(\"Error loading profile on app start:\", error);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error loading user:\", error);\r\n                localStorage.removeItem(\"token\");\r\n                localStorage.removeItem(\"role\");\r\n                localStorage.removeItem(\"user_id\");\r\n                localStorage.removeItem(\"specific_id\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        loadUser();\r\n    }, []);\r\n    \r\n    const login = async (userData) => {\r\n        try {\r\n            // Enhanced validation with detailed logging\r\n            if (!userData) {\r\n                console.error(\"userData is completely missing\");\r\n                throw new Error(\"Invalid login data received: userData is null or undefined\");\r\n            }\r\n            \r\n            // Log the input data exactly as received\r\n            console.log(\"Login data received:\", userData);\r\n            \r\n            // Verify token existence with better debug info\r\n            const token = userData.token || userData.access_token;\r\n            if (!token) {\r\n                console.error(\"No token found in userData:\", userData);\r\n                throw new Error(\"Invalid login data received: No token found\");\r\n            }\r\n            \r\n            // Extract other essential data\r\n            const userId = userData.user_id;\r\n            const role = userData.role;\r\n            \r\n            // Additional validation\r\n            if (!userId || !role) {\r\n                console.error(\"Missing critical data:\", { userId, role });\r\n                throw new Error(\"Invalid login data: Missing user_id or role\");\r\n            }\r\n            \r\n            // Save the basic user data immediately\r\n            localStorage.setItem(\"token\", token);\r\n            localStorage.setItem(\"role\", role);\r\n            localStorage.setItem(\"user_id\", userId);\r\n            \r\n            // Extract specific_id directly from response if available\r\n            let specificId = userData.specific_id;\r\n            console.log(\"Raw specific_id from response:\", specificId, \"Type:\", typeof specificId);\r\n            \r\n            // If specific_id is missing, fetch it based on role\r\n            if ((!specificId || specificId === undefined || specificId === null) && role === \"recruiter\") {\r\n                console.log(\"specific_id is missing in login response, attempting to fetch it\");\r\n                \r\n                try {\r\n                    specificId = await fetchAgencyIdForUser();\r\n                    console.log(\"Fetched specific_id for recruiter:\", specificId);\r\n                    \r\n                    if (specificId) {\r\n                        // Update the userData object with the fetched specific_id\r\n                        userData.specific_id = specificId;\r\n                    }\r\n                } catch (fetchError) {\r\n                    console.error(\"Error fetching specific_id:\", fetchError);\r\n                }\r\n            }\r\n            \r\n            // Now save specific_id to localStorage if we have it\r\n            if (specificId !== undefined && specificId !== null) {\r\n                const specificIdString = String(specificId);\r\n                console.log(\"Saving specific_id to localStorage:\", specificIdString);\r\n                localStorage.setItem(\"specific_id\", specificIdString);\r\n            } else {\r\n                console.warn(\"Could not determine specific_id\");\r\n                localStorage.setItem(\"specific_id\", \"\");\r\n            }\r\n            \r\n            // For debugging - check what was stored\r\n            console.log(\"Verifying localStorage after saving:\");\r\n            console.log(\"- token:\", localStorage.getItem(\"token\") ? \"saved\" : \"missing\");\r\n            console.log(\"- role:\", localStorage.getItem(\"role\"));\r\n            console.log(\"- user_id:\", localStorage.getItem(\"user_id\"));\r\n            console.log(\"- specific_id:\", localStorage.getItem(\"specific_id\"));\r\n            \r\n            // Create user object with consistent properties\r\n            const userObject = {\r\n                token: token,\r\n                role: role,\r\n                user_id: userId,\r\n                specific_id: specificId\r\n            };\r\n            \r\n            setUser(userObject);\r\n            \r\n            // Also load the profile data based on role\r\n            try {\r\n                if (role === \"job_seeker\") {\r\n                    const profileData = await fetchJobSeekerProfile();\r\n                    setUserProfile(profileData);\r\n                } else if (role === \"recruiter\") {\r\n                    const profileData = await fetchRecruiterProfile();\r\n                    setUserProfile(profileData);\r\n                }\r\n            } catch (profileError) {\r\n                console.error(\"Error loading profile after login:\", profileError);\r\n            }\r\n            \r\n            // Redirect based on role\r\n            if (role === \"job_seeker\") {\r\n                navigate(\"/jobs\");\r\n            } else if (role === \"recruiter\") {\r\n                navigate(\"/my-posted-jobs\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Login failed:\", error);\r\n            alert(\"Login failed. Please try again: \" + error.message);\r\n        }\r\n    };\r\n  \r\n    const logout = () => {\r\n        localStorage.removeItem(\"token\");\r\n        localStorage.removeItem(\"role\");\r\n        localStorage.removeItem(\"user_id\");\r\n        localStorage.removeItem(\"specific_id\");\r\n        setUser(null);\r\n        setUserProfile(null);\r\n        navigate(\"/login\");\r\n    };\r\n\r\n    const updateProfile = (newProfileData) => {\r\n        setUserProfile(newProfileData);\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ \r\n            user, \r\n            userProfile, \r\n            login, \r\n            logout, \r\n            updateProfile, \r\n            loading \r\n        }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}