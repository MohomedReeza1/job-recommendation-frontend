{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://127.0.0.1:8000/api\";\nexport const api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport const fetchJobs = async () => {\n  try {\n    const response = await api.get(\"/jobs/\");\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching jobs:\", error);\n    throw error;\n  }\n};\nexport const fetchRecommendations = async () => {\n  const specific_id = localStorage.getItem(\"specific_id\");\n  if (!specific_id) {\n    console.error(\"fetchRecommendations: No specific ID found\");\n    throw new Error(\"User profile information missing\");\n  }\n  try {\n    const response = await api.get(`/recommendations/${specific_id}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recommendations:\", error);\n    throw error;\n  }\n};\nexport const fetchRecommendationsWithForm = async formData => {\n  try {\n    const response = await api.post(\"/recommendations/\", formData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching recommendations:\", error);\n    throw error;\n  }\n};\nexport const fetchAppliedJobs = async () => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  if (!token) {\n    console.error(\"fetchAppliedJobs: No auth token found\");\n    return [];\n  }\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\n    console.error(\"fetchAppliedJobs: No specific ID found\");\n    return [];\n  }\n  try {\n    const response = await api.get(`/applied-jobs/${specific_id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching applied jobs:\", error);\n    return [];\n  }\n};\nexport const loginJobSeeker = async (email, password) => {\n  try {\n    const response = await api.post(\"/auth/login\", new URLSearchParams({\n      username: email,\n      password,\n      scope: \"job_seeker\"\n    }), {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    });\n    console.log(\"Login response:\", response.data);\n\n    // Ensure specific_id is present\n    if (response.data.specific_id === undefined || response.data.specific_id === null) {\n      console.warn(\"No specific_id in login API response, setting a placeholder value\");\n      response.data.specific_id = \"pending\";\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"Login error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\nexport const loginEmployer = async (email, password) => {\n  try {\n    // First, make the login request\n    const response = await api.post(\"/auth/login\", new URLSearchParams({\n      username: email,\n      password,\n      scope: \"recruiter\"\n    }), {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    });\n\n    // Debug the raw response\n    console.log(\"Raw login response data:\", JSON.stringify(response.data));\n\n    // Extract the specific_id from the response and ensure it's properly typed\n    const specificId = response.data.specific_id !== undefined ? response.data.specific_id : null;\n\n    // Create a clean response object with properly typed values\n    const cleanResponse = {\n      access_token: response.data.access_token,\n      token_type: response.data.token_type,\n      role: response.data.role,\n      user_id: Number(response.data.user_id),\n      specific_id: specificId !== null ? Number(specificId) : null,\n      email: email // Add email for reference\n    };\n    console.log(\"Found existing agency profile with ID:\", cleanResponse.specific_id);\n    console.log(\"Login response data:\", cleanResponse);\n    return cleanResponse;\n  } catch (error) {\n    var _error$response2;\n    console.error(\"Login error:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw error;\n  }\n};\n\n// âœ… Fetch Job Seeker Profile\nexport const fetchJobSeekerProfile = async () => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  const user_id = localStorage.getItem(\"user_id\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\n    console.error(\"Missing specific_id for job seeker profile fetch\");\n\n    // Attempt to get specific_id by requesting a new empty profile creation\n    try {\n      // Try to create a profile using the user_id\n      if (user_id) {\n        const response = await api.post(\"/seekers/\", {\n          user_id: parseInt(user_id)\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // Get the specific_id from the response and store it\n        if (response.data && response.data.seeker_id) {\n          localStorage.setItem(\"specific_id\", String(response.data.seeker_id));\n          console.log(\"Created new profile and got specific_id:\", response.data.seeker_id);\n\n          // Return the newly created profile\n          return response.data;\n        }\n      }\n    } catch (profileError) {\n      console.error(\"Failed to create profile:\", profileError);\n    }\n\n    // Return a default empty profile\n    return {\n      name: \"\",\n      age: null,\n      gender: \"\",\n      height: null,\n      weight: null,\n      marital_status: \"\",\n      num_of_children: null,\n      education: \"\",\n      skills: \"\",\n      interests: \"\",\n      previous_jobs: \"\",\n      looking_jobs: \"\",\n      description: \"\",\n      passport_status: \"\"\n    };\n  }\n  try {\n    const response = await api.get(`/seekers/${specific_id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching profile:\", error);\n    // Return empty profile on error\n    return {\n      name: \"\",\n      age: null,\n      gender: \"\",\n      height: null,\n      weight: null,\n      marital_status: \"\",\n      num_of_children: null,\n      education: \"\",\n      skills: \"\",\n      interests: \"\",\n      previous_jobs: \"\",\n      looking_jobs: \"\",\n      description: \"\",\n      passport_status: \"\"\n    };\n  }\n};\nexport const createJobSeekerProfile = async profileData => {\n  const token = localStorage.getItem(\"token\");\n  const user_id = localStorage.getItem(\"user_id\");\n  if (!token || !user_id) {\n    throw new Error(\"Authentication required\");\n  }\n\n  // Add user_id to the profile data\n  const completeProfileData = {\n    ...profileData,\n    user_id: parseInt(user_id)\n  };\n  try {\n    const response = await api.post(\"/seekers/\", completeProfileData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error creating profile:\", error);\n    throw error;\n  }\n};\nexport const updateJobSeekerProfile = async profileData => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  if (!token || !specific_id) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.put(`/seekers/${specific_id}`, profileData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updating profile:\", error);\n    throw error;\n  }\n};\n\n// Function to handle applying for a job\nexport const applyForJob = async (jobId, cvFile, coverLetterFile) => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n\n  // Create form data\n  const formData = new FormData();\n  formData.append(\"job_id\", jobId);\n  formData.append(\"cv\", cvFile);\n  if (coverLetterFile) {\n    formData.append(\"cover_letter\", coverLetterFile);\n  }\n  try {\n    const response = await axios.post(`${API_BASE_URL}/apply-job/`, formData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error applying for job:\", error);\n    throw error;\n  }\n};\n\n// Fetch Recruiter Profile\n\n// export const fetchRecruiterProfile = async () => {\n//   const token = localStorage.getItem(\"token\");\n//   const specific_id = localStorage.getItem(\"specific_id\");\n//   const user_id = localStorage.getItem(\"user_id\");\n//   const email = localStorage.getItem(\"email\");\n\n//   if (!token) {\n//       throw new Error(\"Authentication required\");\n//   }\n\n//   console.log(\"fetchRecruiterProfile - specific_id:\", specific_id);\n\n//   // Parse the specific_id to ensure it's handled correctly\n//   let parsedId = null;\n//   if (specific_id && specific_id !== \"pending\" && specific_id !== \"undefined\" && specific_id !== \"null\") {\n//       parsedId = Number(specific_id);\n//       if (isNaN(parsedId)) {\n//           parsedId = null;\n//       }\n//   }\n\n//   // If we have a valid parsed ID, use it to fetch the profile\n//   if (parsedId !== null) {\n//       try {\n//           console.log(`Fetching recruiter profile with ID: ${parsedId}`);\n//           const response = await api.get(`/recruiters/${parsedId}`, {\n//               headers: { Authorization: `Bearer ${token}` }\n//           });\n//           console.log(\"Profile fetched successfully:\", response.data);\n//           return response.data;\n//       } catch (error) {\n//           console.error(`Error fetching profile with ID ${parsedId}:`, error);\n//           // Continue to try creating a profile if fetch fails\n//       }\n//   }\n\n//   // If we get here, we either don't have a specific_id or there was an error fetching\n//   console.log(\"Creating new recruiter profile...\");\n\n//   // Try to extract the email from login data if available\n//   const contactEmail = email || `user${user_id}@example.com`;\n\n//   // Attempt to create a profile using the user_id\n//   try {\n//       if (user_id) {\n//           // Create a complete profile with ALL required fields\n//           const profileData = { \n//               user_id: parseInt(user_id),\n//               agency_name: email ? email.split('@')[0] : \"Your Agency\", // Use email username as agency name\n//               agency_location: \"Not Specified\", \n//               license_number: `TMP-${user_id}`,\n//               contact_email: contactEmail // Use logged-in email or fallback\n//           };\n\n//           console.log(\"Creating new recruiter profile with data:\", profileData);\n\n//           const response = await api.post(\"/recruiters/\", profileData, {\n//               headers: { Authorization: `Bearer ${token}` }\n//           });\n\n//           console.log(\"Profile creation response:\", response.data);\n\n//           // Get the specific_id from the response and store it\n//           if (response.data && response.data.agency_id) {\n//               localStorage.setItem(\"specific_id\", String(response.data.agency_id));\n//               console.log(\"Created new recruiter profile and got specific_id:\", response.data.agency_id);\n\n//               // Return the newly created profile\n//               return response.data;\n//           }\n//       }\n//   } catch (profileError) {\n//       console.error(\"Failed to create profile:\", profileError.response?.data || profileError.message);\n//       // Continue with empty profile despite error\n//   }\n\n//   // Return a default empty profile\n//   return {\n//       agency_name: \"\",\n//       agency_location: \"\",\n//       license_number: \"\",\n//       contact_email: \"\"\n//   };\n// };\n\n//////////////////////////////////////////////////////////////////\n\n// Update this in your api.js file\n// export const fetchRecruiterProfile = async () => {\n//   const token = localStorage.getItem(\"token\");\n//   const specific_id = localStorage.getItem(\"specific_id\");\n\n//   if (!token) {\n//       throw new Error(\"Authentication required\");\n//   }\n\n//   console.log(\"fetchRecruiterProfile - specific_id:\", specific_id);\n\n//   // Parse the specific_id to ensure it's handled correctly\n//   let parsedId = null;\n//   if (specific_id && specific_id !== \"pending\" && specific_id !== \"undefined\" && specific_id !== \"null\") {\n//       parsedId = Number(specific_id);\n//       if (isNaN(parsedId)) {\n//           parsedId = null;\n//       }\n//   } else {\n//       throw new Error(\"Invalid profile ID\");\n//   }\n\n//   // Fetch the profile\n//   try {\n//       console.log(`Fetching recruiter profile with ID: ${parsedId}`);\n//       const response = await api.get(`/recruiters/${parsedId}`, {\n//           headers: { Authorization: `Bearer ${token}` }\n//       });\n//       console.log(\"Profile fetched successfully:\", response.data);\n//       return response.data;\n//   } catch (error) {\n//       console.error(`Error fetching profile with ID ${parsedId}:`, error);\n//       throw error;\n//   }\n// }\n\nexport const fetchRecruiterProfile = async () => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  if (!token) {\n    console.error(\"fetchRecruiterProfile: No auth token found\");\n    throw new Error(\"Authentication required\");\n  }\n  console.log(\"fetchRecruiterProfile - specific_id:\", specific_id, \"Type:\", typeof specific_id);\n\n  // Check if specific_id exists and is valid\n  if (!specific_id || specific_id === \"\" || specific_id === \"undefined\" || specific_id === \"null\") {\n    console.error(\"fetchRecruiterProfile: specific_id is missing or invalid:\", specific_id);\n    throw new Error(\"Profile ID missing or invalid\");\n  }\n\n  // Parse the ID as a number\n  let parsedId;\n  try {\n    parsedId = parseInt(specific_id, 10);\n    if (isNaN(parsedId)) {\n      console.error(\"fetchRecruiterProfile: Failed to parse specific_id as number:\", specific_id);\n      throw new Error(\"Invalid profile ID format\");\n    }\n  } catch (error) {\n    console.error(\"Error parsing specific_id:\", error);\n    throw new Error(\"Invalid profile ID format\");\n  }\n\n  // Fetch the profile\n  try {\n    console.log(`Fetching recruiter profile with ID: ${parsedId}`);\n    const response = await api.get(`/recruiters/${parsedId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log(\"Profile fetched successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching profile with ID ${parsedId}:`, error);\n    throw error;\n  }\n};\nexport const fetchMyPostedJobs = async () => {\n  const token = localStorage.getItem(\"token\");\n  const specific_id = localStorage.getItem(\"specific_id\");\n  if (!token) {\n    console.error(\"fetchMyPostedJobs: No auth token found\");\n    return [];\n  }\n  console.log(\"fetchMyPostedJobs - specific_id:\", specific_id, \"Type:\", typeof specific_id);\n\n  // Check if specific_id exists and is valid\n  if (!specific_id || specific_id === \"\" || specific_id === \"undefined\" || specific_id === \"null\") {\n    console.error(\"fetchMyPostedJobs: specific_id is missing or invalid:\", specific_id);\n    return []; // Return empty array instead of throwing\n  }\n\n  // Try to parse the ID as a number\n  let parsedId;\n  try {\n    parsedId = parseInt(specific_id, 10);\n    if (isNaN(parsedId)) {\n      console.error(\"fetchMyPostedJobs: Failed to parse specific_id as number:\", specific_id);\n      return []; // Return empty array instead of throwing\n    }\n  } catch (error) {\n    console.error(\"Error parsing specific_id:\", error);\n    return []; // Return empty array instead of throwing\n  }\n  try {\n    console.log(`Fetching posted jobs for agency ID: ${parsedId}`);\n    const response = await api.get(`/recruiters/${parsedId}/my-posted-jobs`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log(\"Posted jobs fetched successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    console.error(\"Error fetching posted jobs:\", error);\n    // Check for specific error type\n    if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.detail) {\n      console.error(\"Server error detail:\", error.response.data.detail);\n    }\n    // Return empty array instead of throwing to prevent UI crashes\n    return [];\n  }\n};\n\n//////////////////////////////////////////////////////////////////\n\n// export const createRecruiterProfile = async (profileData) => {\n//   const token = localStorage.getItem(\"token\");\n//   const user_id = localStorage.getItem(\"user_id\");\n\n//   if (!token || !user_id) {\n//     throw new Error(\"Authentication required\");\n//   }\n\n//   // Add user_id to the profile data\n//   const completeProfileData = {\n//     ...profileData,\n//     user_id: parseInt(user_id)\n//   };\n\n//   try {\n//     const response = await api.post(\"/recruiters/\", completeProfileData, {\n//       headers: { \n//         Authorization: `Bearer ${token}`, \n//         \"Content-Type\": \"application/json\" \n//       },\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error creating profile:\", error);\n//     throw error;\n//   }\n// };\n\n// export const updateRecruiterProfile = async (profileData) => {\n//   const token = localStorage.getItem(\"token\");\n//   const specific_id = localStorage.getItem(\"specific_id\");\n\n//   if (!token || !specific_id) {\n//       throw new Error(\"Authentication required\");\n//   }\n\n//   try {\n//       const response = await api.put(`/recruiters/${specific_id}`, profileData, {\n//           headers: { Authorization: `Bearer ${token}` }\n//       });\n//       return response.data;\n//   } catch (error) {\n//       console.error(\"Error updating profile:\", error);\n//       throw error;\n//   }\n// };\n\nexport const postJob = async jobData => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    // We don't need to set the recruiter_id/agency_id here\n    // The backend will handle setting the correct agency_id based on the authenticated user\n\n    const response = await api.post(\"/post-job/\", jobData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    console.error(\"Error posting job:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    throw error;\n  }\n};\nexport const deleteJob = async jobId => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.delete(`/jobs/${jobId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    console.error(\"Error deleting job:\", ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw error;\n  }\n};\nexport const fetchJobDetails = async jobId => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await api.get(`/jobs/${jobId}`, {\n      headers: token ? {\n        Authorization: `Bearer ${token}`\n      } : {}\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response6;\n    console.error(\"Error fetching job details:\", ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message);\n    throw error;\n  }\n};\nexport const fetchJobApplicants = async jobId => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.get(`/job-applicants/${jobId}/`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response7;\n    console.error(\"Error fetching job applicants:\", ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message);\n    throw error;\n  }\n};\nexport const updateJob = async (jobId, jobData) => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    throw new Error(\"Authentication required\");\n  }\n  try {\n    const response = await api.put(`/jobs/${jobId}`, jobData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response8;\n    console.error(\"Error updating job:\", ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","headers","fetchJobs","response","get","data","error","console","fetchRecommendations","specific_id","localStorage","getItem","Error","fetchRecommendationsWithForm","formData","post","fetchAppliedJobs","token","Authorization","loginJobSeeker","email","password","URLSearchParams","username","scope","log","undefined","warn","_error$response","message","loginEmployer","JSON","stringify","specificId","cleanResponse","access_token","token_type","role","user_id","Number","_error$response2","fetchJobSeekerProfile","parseInt","seeker_id","setItem","String","profileError","name","age","gender","height","weight","marital_status","num_of_children","education","skills","interests","previous_jobs","looking_jobs","description","passport_status","createJobSeekerProfile","profileData","completeProfileData","updateJobSeekerProfile","put","applyForJob","jobId","cvFile","coverLetterFile","FormData","append","fetchRecruiterProfile","parsedId","isNaN","fetchMyPostedJobs","_error$response3","_error$response3$data","detail","postJob","jobData","_error$response4","deleteJob","delete","_error$response5","fetchJobDetails","_error$response6","fetchJobApplicants","_error$response7","updateJob","_error$response8"],"sources":["C:/final_year_project/app/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://127.0.0.1:8000/api\";\r\n\r\nexport const api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\nexport const fetchJobs = async () => {\r\n  try {\r\n    const response = await api.get(\"/jobs/\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching jobs:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchRecommendations = async () => {\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n  if (!specific_id) {\r\n    console.error(\"fetchRecommendations: No specific ID found\");\r\n    throw new Error(\"User profile information missing\");\r\n  }\r\n  \r\n  try {\r\n    const response = await api.get(`/recommendations/${specific_id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching recommendations:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchRecommendationsWithForm = async (formData) => {\r\n  try {\r\n    const response = await api.post(\"/recommendations/\", formData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching recommendations:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchAppliedJobs = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n  if (!token) {\r\n      console.error(\"fetchAppliedJobs: No auth token found\");\r\n      return [];\r\n  }\r\n  \r\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\r\n      console.error(\"fetchAppliedJobs: No specific ID found\");\r\n      return [];\r\n  }\r\n  \r\n  try {\r\n      const response = await api.get(`/applied-jobs/${specific_id}`, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      \r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error fetching applied jobs:\", error);\r\n      return [];\r\n  }\r\n};\r\n\r\nexport const loginJobSeeker = async (email, password) => {\r\n  try {\r\n    const response = await api.post(\"/auth/login\", new URLSearchParams({ \r\n      username: email, \r\n      password, \r\n      scope: \"job_seeker\" \r\n    }),\r\n    { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n    );\r\n    \r\n    console.log(\"Login response:\", response.data);\r\n    \r\n    // Ensure specific_id is present\r\n    if (response.data.specific_id === undefined || response.data.specific_id === null) {\r\n      console.warn(\"No specific_id in login API response, setting a placeholder value\");\r\n      response.data.specific_id = \"pending\";\r\n    }\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const loginEmployer = async (email, password) => {\r\n  try {\r\n    // First, make the login request\r\n    const response = await api.post(\"/auth/login\", new URLSearchParams({\r\n      username: email, \r\n      password, \r\n      scope: \"recruiter\" \r\n    }),\r\n    { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n    );\r\n    \r\n    // Debug the raw response\r\n    console.log(\"Raw login response data:\", JSON.stringify(response.data));\r\n    \r\n    // Extract the specific_id from the response and ensure it's properly typed\r\n    const specificId = response.data.specific_id !== undefined ? response.data.specific_id : null;\r\n    \r\n    // Create a clean response object with properly typed values\r\n    const cleanResponse = {\r\n      access_token: response.data.access_token,\r\n      token_type: response.data.token_type,\r\n      role: response.data.role,\r\n      user_id: Number(response.data.user_id),\r\n      specific_id: specificId !== null ? Number(specificId) : null,\r\n      email: email // Add email for reference\r\n    };\r\n    \r\n    console.log(\"Found existing agency profile with ID:\", cleanResponse.specific_id);\r\n    console.log(\"Login response data:\", cleanResponse);\r\n    \r\n    return cleanResponse;\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// âœ… Fetch Job Seeker Profile\r\nexport const fetchJobSeekerProfile = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  const user_id = localStorage.getItem(\"user_id\");\r\n  \r\n  if (!token) {\r\n      throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  if (!specific_id || specific_id === \"pending\" || specific_id === \"undefined\" || specific_id === \"null\") {\r\n      console.error(\"Missing specific_id for job seeker profile fetch\");\r\n      \r\n      // Attempt to get specific_id by requesting a new empty profile creation\r\n      try {\r\n          // Try to create a profile using the user_id\r\n          if (user_id) {\r\n              const response = await api.post(\"/seekers/\", \r\n                  { user_id: parseInt(user_id) },\r\n                  { headers: { Authorization: `Bearer ${token}` }}\r\n              );\r\n              \r\n              // Get the specific_id from the response and store it\r\n              if (response.data && response.data.seeker_id) {\r\n                  localStorage.setItem(\"specific_id\", String(response.data.seeker_id));\r\n                  console.log(\"Created new profile and got specific_id:\", response.data.seeker_id);\r\n                  \r\n                  // Return the newly created profile\r\n                  return response.data;\r\n              }\r\n          }\r\n      } catch (profileError) {\r\n          console.error(\"Failed to create profile:\", profileError);\r\n      }\r\n      \r\n      // Return a default empty profile\r\n      return {\r\n          name: \"\",\r\n          age: null,\r\n          gender: \"\",\r\n          height: null,\r\n          weight: null,\r\n          marital_status: \"\",\r\n          num_of_children: null,\r\n          education: \"\",\r\n          skills: \"\",\r\n          interests: \"\",\r\n          previous_jobs: \"\",\r\n          looking_jobs: \"\",\r\n          description: \"\",\r\n          passport_status: \"\"\r\n      };\r\n  }\r\n  \r\n  try {\r\n      const response = await api.get(`/seekers/${specific_id}`, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error fetching profile:\", error);\r\n      // Return empty profile on error\r\n      return {\r\n          name: \"\",\r\n          age: null,\r\n          gender: \"\",\r\n          height: null,\r\n          weight: null,\r\n          marital_status: \"\",\r\n          num_of_children: null,\r\n          education: \"\",\r\n          skills: \"\",\r\n          interests: \"\",\r\n          previous_jobs: \"\",\r\n          looking_jobs: \"\",\r\n          description: \"\",\r\n          passport_status: \"\"\r\n      };\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const createJobSeekerProfile = async (profileData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const user_id = localStorage.getItem(\"user_id\");\r\n  \r\n  if (!token || !user_id) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  // Add user_id to the profile data\r\n  const completeProfileData = {\r\n    ...profileData,\r\n    user_id: parseInt(user_id)\r\n  };\r\n  \r\n  try {\r\n    const response = await api.post(\"/seekers/\", completeProfileData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error creating profile:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateJobSeekerProfile = async (profileData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n  if (!token || !specific_id) {\r\n      throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n      const response = await api.put(`/seekers/${specific_id}`, profileData, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error updating profile:\", error);\r\n      throw error;\r\n  }\r\n};\r\n\r\n// Function to handle applying for a job\r\nexport const applyForJob = async (jobId, cvFile, coverLetterFile) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  \r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  // Create form data\r\n  const formData = new FormData();\r\n  formData.append(\"job_id\", jobId);\r\n  formData.append(\"cv\", cvFile);\r\n  \r\n  if (coverLetterFile) {\r\n    formData.append(\"cover_letter\", coverLetterFile);\r\n  }\r\n  \r\n  try {\r\n    const response = await axios.post(\r\n      `${API_BASE_URL}/apply-job/`,\r\n      formData,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error applying for job:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Fetch Recruiter Profile\r\n\r\n// export const fetchRecruiterProfile = async () => {\r\n//   const token = localStorage.getItem(\"token\");\r\n//   const specific_id = localStorage.getItem(\"specific_id\");\r\n//   const user_id = localStorage.getItem(\"user_id\");\r\n//   const email = localStorage.getItem(\"email\");\r\n  \r\n//   if (!token) {\r\n//       throw new Error(\"Authentication required\");\r\n//   }\r\n  \r\n//   console.log(\"fetchRecruiterProfile - specific_id:\", specific_id);\r\n  \r\n//   // Parse the specific_id to ensure it's handled correctly\r\n//   let parsedId = null;\r\n//   if (specific_id && specific_id !== \"pending\" && specific_id !== \"undefined\" && specific_id !== \"null\") {\r\n//       parsedId = Number(specific_id);\r\n//       if (isNaN(parsedId)) {\r\n//           parsedId = null;\r\n//       }\r\n//   }\r\n  \r\n//   // If we have a valid parsed ID, use it to fetch the profile\r\n//   if (parsedId !== null) {\r\n//       try {\r\n//           console.log(`Fetching recruiter profile with ID: ${parsedId}`);\r\n//           const response = await api.get(`/recruiters/${parsedId}`, {\r\n//               headers: { Authorization: `Bearer ${token}` }\r\n//           });\r\n//           console.log(\"Profile fetched successfully:\", response.data);\r\n//           return response.data;\r\n//       } catch (error) {\r\n//           console.error(`Error fetching profile with ID ${parsedId}:`, error);\r\n//           // Continue to try creating a profile if fetch fails\r\n//       }\r\n//   }\r\n  \r\n//   // If we get here, we either don't have a specific_id or there was an error fetching\r\n//   console.log(\"Creating new recruiter profile...\");\r\n  \r\n//   // Try to extract the email from login data if available\r\n//   const contactEmail = email || `user${user_id}@example.com`;\r\n  \r\n//   // Attempt to create a profile using the user_id\r\n//   try {\r\n//       if (user_id) {\r\n//           // Create a complete profile with ALL required fields\r\n//           const profileData = { \r\n//               user_id: parseInt(user_id),\r\n//               agency_name: email ? email.split('@')[0] : \"Your Agency\", // Use email username as agency name\r\n//               agency_location: \"Not Specified\", \r\n//               license_number: `TMP-${user_id}`,\r\n//               contact_email: contactEmail // Use logged-in email or fallback\r\n//           };\r\n          \r\n//           console.log(\"Creating new recruiter profile with data:\", profileData);\r\n          \r\n//           const response = await api.post(\"/recruiters/\", profileData, {\r\n//               headers: { Authorization: `Bearer ${token}` }\r\n//           });\r\n          \r\n//           console.log(\"Profile creation response:\", response.data);\r\n          \r\n//           // Get the specific_id from the response and store it\r\n//           if (response.data && response.data.agency_id) {\r\n//               localStorage.setItem(\"specific_id\", String(response.data.agency_id));\r\n//               console.log(\"Created new recruiter profile and got specific_id:\", response.data.agency_id);\r\n              \r\n//               // Return the newly created profile\r\n//               return response.data;\r\n//           }\r\n//       }\r\n//   } catch (profileError) {\r\n//       console.error(\"Failed to create profile:\", profileError.response?.data || profileError.message);\r\n//       // Continue with empty profile despite error\r\n//   }\r\n  \r\n//   // Return a default empty profile\r\n//   return {\r\n//       agency_name: \"\",\r\n//       agency_location: \"\",\r\n//       license_number: \"\",\r\n//       contact_email: \"\"\r\n//   };\r\n// };\r\n\r\n//////////////////////////////////////////////////////////////////\r\n\r\n// Update this in your api.js file\r\n// export const fetchRecruiterProfile = async () => {\r\n//   const token = localStorage.getItem(\"token\");\r\n//   const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n//   if (!token) {\r\n//       throw new Error(\"Authentication required\");\r\n//   }\r\n  \r\n//   console.log(\"fetchRecruiterProfile - specific_id:\", specific_id);\r\n  \r\n//   // Parse the specific_id to ensure it's handled correctly\r\n//   let parsedId = null;\r\n//   if (specific_id && specific_id !== \"pending\" && specific_id !== \"undefined\" && specific_id !== \"null\") {\r\n//       parsedId = Number(specific_id);\r\n//       if (isNaN(parsedId)) {\r\n//           parsedId = null;\r\n//       }\r\n//   } else {\r\n//       throw new Error(\"Invalid profile ID\");\r\n//   }\r\n  \r\n//   // Fetch the profile\r\n//   try {\r\n//       console.log(`Fetching recruiter profile with ID: ${parsedId}`);\r\n//       const response = await api.get(`/recruiters/${parsedId}`, {\r\n//           headers: { Authorization: `Bearer ${token}` }\r\n//       });\r\n//       console.log(\"Profile fetched successfully:\", response.data);\r\n//       return response.data;\r\n//   } catch (error) {\r\n//       console.error(`Error fetching profile with ID ${parsedId}:`, error);\r\n//       throw error;\r\n//   }\r\n// }\r\n\r\n\r\nexport const fetchRecruiterProfile = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n  if (!token) {\r\n      console.error(\"fetchRecruiterProfile: No auth token found\");\r\n      throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  console.log(\"fetchRecruiterProfile - specific_id:\", specific_id, \"Type:\", typeof specific_id);\r\n  \r\n  // Check if specific_id exists and is valid\r\n  if (!specific_id || specific_id === \"\" || specific_id === \"undefined\" || specific_id === \"null\") {\r\n      console.error(\"fetchRecruiterProfile: specific_id is missing or invalid:\", specific_id);\r\n      throw new Error(\"Profile ID missing or invalid\");\r\n  }\r\n  \r\n  // Parse the ID as a number\r\n  let parsedId;\r\n  try {\r\n      parsedId = parseInt(specific_id, 10);\r\n      if (isNaN(parsedId)) {\r\n          console.error(\"fetchRecruiterProfile: Failed to parse specific_id as number:\", specific_id);\r\n          throw new Error(\"Invalid profile ID format\");\r\n      }\r\n  } catch (error) {\r\n      console.error(\"Error parsing specific_id:\", error);\r\n      throw new Error(\"Invalid profile ID format\");\r\n  }\r\n  \r\n  // Fetch the profile\r\n  try {\r\n      console.log(`Fetching recruiter profile with ID: ${parsedId}`);\r\n      const response = await api.get(`/recruiters/${parsedId}`, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      console.log(\"Profile fetched successfully:\", response.data);\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(`Error fetching profile with ID ${parsedId}:`, error);\r\n      throw error;\r\n  }\r\n}\r\n\r\nexport const fetchMyPostedJobs = async () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n  if (!token) {\r\n      console.error(\"fetchMyPostedJobs: No auth token found\");\r\n      return [];\r\n  }\r\n  \r\n  console.log(\"fetchMyPostedJobs - specific_id:\", specific_id, \"Type:\", typeof specific_id);\r\n  \r\n  // Check if specific_id exists and is valid\r\n  if (!specific_id || specific_id === \"\" || specific_id === \"undefined\" || specific_id === \"null\") {\r\n      console.error(\"fetchMyPostedJobs: specific_id is missing or invalid:\", specific_id);\r\n      return [];  // Return empty array instead of throwing\r\n  }\r\n  \r\n  // Try to parse the ID as a number\r\n  let parsedId;\r\n  try {\r\n      parsedId = parseInt(specific_id, 10);\r\n      if (isNaN(parsedId)) {\r\n          console.error(\"fetchMyPostedJobs: Failed to parse specific_id as number:\", specific_id);\r\n          return [];  // Return empty array instead of throwing\r\n      }\r\n  } catch (error) {\r\n      console.error(\"Error parsing specific_id:\", error);\r\n      return [];  // Return empty array instead of throwing\r\n  }\r\n  \r\n  try {\r\n      console.log(`Fetching posted jobs for agency ID: ${parsedId}`);\r\n      const response = await api.get(`/recruiters/${parsedId}/my-posted-jobs`, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      console.log(\"Posted jobs fetched successfully:\", response.data);\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"Error fetching posted jobs:\", error);\r\n      // Check for specific error type\r\n      if (error.response?.data?.detail) {\r\n          console.error(\"Server error detail:\", error.response.data.detail);\r\n      }\r\n      // Return empty array instead of throwing to prevent UI crashes\r\n      return [];\r\n  }\r\n};\r\n\r\n//////////////////////////////////////////////////////////////////\r\n\r\n// export const createRecruiterProfile = async (profileData) => {\r\n//   const token = localStorage.getItem(\"token\");\r\n//   const user_id = localStorage.getItem(\"user_id\");\r\n  \r\n//   if (!token || !user_id) {\r\n//     throw new Error(\"Authentication required\");\r\n//   }\r\n  \r\n//   // Add user_id to the profile data\r\n//   const completeProfileData = {\r\n//     ...profileData,\r\n//     user_id: parseInt(user_id)\r\n//   };\r\n  \r\n//   try {\r\n//     const response = await api.post(\"/recruiters/\", completeProfileData, {\r\n//       headers: { \r\n//         Authorization: `Bearer ${token}`, \r\n//         \"Content-Type\": \"application/json\" \r\n//       },\r\n//     });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error(\"Error creating profile:\", error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n// export const updateRecruiterProfile = async (profileData) => {\r\n//   const token = localStorage.getItem(\"token\");\r\n//   const specific_id = localStorage.getItem(\"specific_id\");\r\n  \r\n//   if (!token || !specific_id) {\r\n//       throw new Error(\"Authentication required\");\r\n//   }\r\n  \r\n//   try {\r\n//       const response = await api.put(`/recruiters/${specific_id}`, profileData, {\r\n//           headers: { Authorization: `Bearer ${token}` }\r\n//       });\r\n//       return response.data;\r\n//   } catch (error) {\r\n//       console.error(\"Error updating profile:\", error);\r\n//       throw error;\r\n//   }\r\n// };\r\n\r\n\r\nexport const postJob = async (jobData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  \r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n    // We don't need to set the recruiter_id/agency_id here\r\n    // The backend will handle setting the correct agency_id based on the authenticated user\r\n    \r\n    const response = await api.post(\"/post-job/\", jobData, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error posting job:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const deleteJob = async (jobId) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  try {\r\n    const response = await api.delete(`/jobs/${jobId}`, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error deleting job:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchJobDetails = async (jobId) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  try {\r\n    const response = await api.get(`/jobs/${jobId}`, {\r\n      headers: token ? { Authorization: `Bearer ${token}` } : {}\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching job details:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchJobApplicants = async (jobId) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  try {\r\n    const response = await api.get(`/job-applicants/${jobId}/`, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching job applicants:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateJob = async (jobId, jobData) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  \r\n  if (!token) {\r\n    throw new Error(\"Authentication required\");\r\n  }\r\n  \r\n  try {\r\n    const response = await api.put(`/jobs/${jobId}`, jobData, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error updating job:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}